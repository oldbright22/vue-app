{"ast":null,"code":"import { ref } from 'vue';\nimport OpenAI from 'openai';\n//import { response } from 'express';\n\n//process.env.OPENAI_API_KEY \nconst key = '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';\n//const url = 'https://api.openai.com/v1/completions'\n\n//const dotenv = require('dotenv');\n//dotenv.config(); \n\nexport default {\n  __name: 'MoviePitch',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    alert(\"antes de openai\");\n\n    //New (i.e., OpenAI NodeJS SDK v4)\n    const openai = new OpenAI({\n      apiKey: key,\n      // This is also the default, can be omitted\n      dangerouslyAllowBrowser: true //Enable this due we do not have a client/server architecture\n    });\n\n    // Reactive Variables\n    const userInput = ref(\"\");\n    const imageUrl = ref(\"\");\n    const title = ref(\"\");\n    const stars = ref(\"\");\n    const text = ref(\"\");\n    const setupInputContainer = ref(null);\n    const movieBossText = ref(null);\n\n    // Show Loading Indicator\n    const showLoadingIndicator = () => {\n      setupInputContainer.value.innerHTML = `<img src=\"../assets/loading.svg\" class=\"loading\" id=\"loading\">`;\n      movieBossText.value.innerText = `Ok, just wait a second while my digital brain digests that...`;\n    };\n\n    // Submit User Input\n    const submitSetup = () => {\n      if (userInput.value) {\n        showLoadingIndicator();\n        fetchBotReply(userInput.value);\n        //fetchSynopsis(userInput.value); //fetch title called inside Synopsis\n        //fetchImagePrompt(fetchTitle,fetchSynopsis);\n      }\n    };\n\n    // Fetch Bot Reply\n    const fetchBotReply = async outline => {\n      try {\n        alert(\"`` inside - with this outline: \" + outline);\n        alert(openai.apiKey);\n\n        // API Call to OpenAI for Bot Reply\n        const response = await openai.completions.create({\n          model: 'gpt-3.5-turbo-instruct',\n          //gpt-3.5-turbo-instruct, babbage-002,  davinci-002\n          prompt: `Generate a short message about cooking.`,\n          temperature: 0.8,\n          max_tokens: 25\n        }).then(response => {\n          console.log(response.choices[0].text.trim());\n          console.log(response.choices[0].finish_reason);\n          console.log(response.choices);\n          movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\n        });\n\n        //###\n        //  outline: ${outline}\n\n        //movieBossText.value.innerText = \"creating a fake end\";\n        alert(\"response end\");\n        console.log(response);\n        //movieBossText.value.innerText = response.data.choices[0].text.trim();\n      } catch (error) {\n        console.error('[Fetching bot reply] ERROR:', error);\n        // Handle errors as needed\n      }\n    };\n\n    /*  \r\n      // Fetch Synopsis\r\n      const fetchSynopsis = async (outline) => {\r\n        try {\r\n          // API Call to OpenAI for Synopsis\r\n          const response = await openai.completions.create({\r\n            model: 'text-davinci-003',\r\n            prompt: `Generate an engaging, professional and marketable movie synopsis based on an outline. The synopsis should include actors names in brackets after each character. Choose actors that would be ideal for this role. \r\n            ###\r\n            outline: ${outline}\r\n            synopsis: \r\n            `,\r\n            max_tokens: 700,\r\n          });\r\n    \r\n          const synopsis = response.data.choices[0].text.trim();\r\n          text.value = synopsis;\r\n          await fetchTitle(synopsis);\r\n          await fetchStars(synopsis);\r\n        } catch (error) {\r\n          console.error('Error fetching synopsis:', error);\r\n          // Handle errors as needed\r\n        } \r\n      };\r\n    \r\n      // Fetch Movie Title\r\n      const fetchTitle = async (synopsis) => {\r\n        try {\r\n          // API Call to OpenAI for Movie Title\r\n          const response = await openai.completions.create({\r\n            model: 'text-davinci-003',\r\n            prompt: `Generate a catchy movie title for this synopsis: ${synopsis}`,\r\n            max_tokens: 25,\r\n            temperature: 0.7,\r\n          });\r\n    \r\n          title.value = response.data.choices[0].text.trim();\r\n        } catch (error) {\r\n          console.error('Error fetching title:', error);\r\n          // Handle errors as needed\r\n        }\r\n      };\r\n    \r\n      // Fetch Cast Stars\r\n      const fetchStars = async (synopsis) => {\r\n        try {\r\n          // API Call to OpenAI for Cast Stars\r\n          const response = await openai.completions.create({\r\n            model: 'text-davinci-003',\r\n            prompt: `Extract the names in brackets from the synopsis.\r\n            ###\r\n            synopsis: ${synopsis}\r\n            names:   \r\n            `,\r\n            max_tokens: 30,\r\n          });\r\n    \r\n          stars.value = response.data.choices[0].text.trim();\r\n        } catch (error) {\r\n          console.error('Error fetching stars:', error);\r\n          // Handle errors as needed\r\n        }\r\n      };\r\n    \r\n      // Fetch Image Prompt and URL\r\n      const fetchImagePrompt = async (title, synopsis) => {\r\n        try {\r\n          // API Call to OpenAI for Image Prompt\r\n          const response = await openai.completions.create({\r\n            model: 'text-davinci-003',\r\n            prompt: `Give a short description of an image which could be used to advertise a movie based on a title and synopsis. The description should be rich in visual detail but contain no names.\r\n            ###\r\n            title: ${title}\r\n            synopsis: ${synopsis}\r\n            image description: \r\n            `,\r\n            temperature: 0.8,\r\n            max_tokens: 100,\r\n          });\r\n    \r\n          fetchImageUrl(response.data.choices[0].text.trim());\r\n        } catch (error) {\r\n          console.error('Error fetching image prompt:', error);\r\n          // Handle errors as needed\r\n        }\r\n      };\r\n    \r\n      // Fetch Image URL\r\n      const fetchImageUrl = async (imagePrompt) => {\r\n        try {\r\n          // API Call to OpenAI for Image URL\r\n          const response = await openai.images.generate({\r\n            prompt: `${imagePrompt}. There should be no text in this image.`,\r\n            n: 1,\r\n            size: '256x256',\r\n            response_format: 'b64_json',\r\n          });\r\n    \r\n          imageUrl.value = `data:image/png;base64,${response.data.data[0].b64_json}`;\r\n          setupInputContainer.value.innerHTML = `<button id=\"view-pitch-btn\" class=\"view-pitch-btn\">View Pitch</button>`;\r\n          setupInputContainer.value.querySelector('#view-pitch-btn').addEventListener('click', () => {\r\n            setupInputContainer.value.querySelector('#setup-container').style.display = 'none';\r\n            setupInputContainer.value.querySelector('#output-container').style.display = 'flex';\r\n            movieBossText.value.innerText = `This idea is so good I'm jealous! It's gonna make you rich for sure! Remember, I want 10% ðŸ’°`;\r\n          });\r\n        } catch (error) {\r\n          console.error('Error fetching image URL:', error);\r\n          // Handle errors as needed\r\n        }\r\n      };\r\n    */\n\n    // Switch to Output View\n    const viewPitch = () => {\n      document.getElementById('setup-container').style.display = 'none';\n      document.getElementById('output-container').style.display = 'flex';\n      movieBossText.value.innerText = `This idea is so good I'm jealous! It's gonna make you rich for sure! Remember, I want 10% ðŸ’°`;\n    };\n    const __returned__ = {\n      key,\n      openai,\n      userInput,\n      imageUrl,\n      title,\n      stars,\n      text,\n      setupInputContainer,\n      movieBossText,\n      showLoadingIndicator,\n      submitSetup,\n      fetchBotReply,\n      viewPitch,\n      ref,\n      get OpenAI() {\n        return OpenAI;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","OpenAI","key","alert","openai","apiKey","dangerouslyAllowBrowser","userInput","imageUrl","title","stars","text","setupInputContainer","movieBossText","showLoadingIndicator","value","innerHTML","innerText","submitSetup","fetchBotReply","outline","response","completions","create","model","prompt","temperature","max_tokens","then","console","log","choices","trim","finish_reason","error","viewPitch","document","getElementById","style","display"],"sources":["C:/Users/btina/LLM/vue-app/src/components/MoviePitch.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <section id=\"setup-container\">\r\n      <div class=\"setup-inner\">\r\n        <img src=\"../assets/movieboss.png\" alt=\"MovieBoss\">\r\n        <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n          <p ref=\"movieBossText\">\r\n            Give me a one-sentence concept, and I'll give you an eye-catching title, a synopsis the studios will love, a movie poster...!\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"setup-inner setup-input-container\" ref=\"setupInputContainer\">\r\n        <textarea v-model=\"userInput\" id=\"setup-textarea\" placeholder=\"An evil genius wants to take over the world using AI.\"></textarea>\r\n        <button @click=\"submitSetup\" class=\"send-btn\" id=\"send-btn\" aria-label=\"send\">\r\n          <img src=\"../assets/send-btn-icon.png\" alt=\"send\">\r\n        </button>\r\n      </div>\r\n    </section>\r\n\r\n    <section class=\"output-container\" id=\"output-container\">\r\n      <div id=\"output-img-container\" class=\"output-img-container\">\r\n        <img :src=\"imageUrl\" alt=\"Movie Poster\">\r\n      </div>\r\n      <h1 id=\"output-title\">{{ title }}</h1>\r\n      <h2 id=\"output-stars\">{{ stars }}</h2>\r\n      <p id=\"output-text\">{{ text }}</p>\r\n      <button class=\"view-pitch-btn\" @click=\"viewPitch\" aria-label=\"View Pitch\">\r\n        View Pitch\r\n      </button>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n  import { ref } from 'vue';\r\n\r\n  alert(\"antes de openai\")\r\n\r\n  //New (i.e., OpenAI NodeJS SDK v4)\r\n  import OpenAI from 'openai';\r\n //import { response } from 'express';\r\n  \r\n  //process.env.OPENAI_API_KEY \r\n  const key='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'\r\n  //const url = 'https://api.openai.com/v1/completions'\r\n\r\n  //const dotenv = require('dotenv');\r\n  //dotenv.config(); \r\n\r\n  const openai = new OpenAI({\r\n  apiKey: key, // This is also the default, can be omitted\r\n  dangerouslyAllowBrowser: true  //Enable this due we do not have a client/server architecture\r\n  });\r\n \r\n  \r\n  // Reactive Variables\r\n  const userInput = ref(\"\");\r\n  const imageUrl = ref(\"\");\r\n  const title = ref(\"\");\r\n  const stars = ref(\"\");\r\n  const text = ref(\"\");\r\n  const setupInputContainer = ref(null);\r\n  const movieBossText = ref(null);\r\n  \r\n  // Show Loading Indicator\r\n  const showLoadingIndicator = () => {\r\n    setupInputContainer.value.innerHTML = `<img src=\"../assets/loading.svg\" class=\"loading\" id=\"loading\">`;\r\n    movieBossText.value.innerText = `Ok, just wait a second while my digital brain digests that...`;\r\n  };\r\n\r\n  // Submit User Input\r\n  const submitSetup = () => {\r\n    if (userInput.value) {\r\n      showLoadingIndicator();\r\n      fetchBotReply(userInput.value);\r\n      //fetchSynopsis(userInput.value); //fetch title called inside Synopsis\r\n      //fetchImagePrompt(fetchTitle,fetchSynopsis);\r\n    }\r\n  };\r\n\r\n  \r\n  // Fetch Bot Reply\r\n  const fetchBotReply = async (outline) => {\r\n    try {\r\n      \r\n    alert(\"`` inside - with this outline: \" + outline);\r\n    alert(openai.apiKey);    \r\n\r\n      // API Call to OpenAI for Bot Reply\r\n      const response = await openai.completions.create({\r\n      model: 'gpt-3.5-turbo-instruct', //gpt-3.5-turbo-instruct, babbage-002,  davinci-002\r\n      prompt: `Generate a short message about cooking.`,\r\n      temperature: 0.8,\r\n      max_tokens: 25\r\n      }).then(response => {\r\n        console.log(response.choices[0].text.trim())\r\n        console.log(response.choices[0].finish_reason)\r\n        console.log(response.choices)\r\n        movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason +'] '+ response.choices[0].text.trim(); \r\n      });\r\n\r\n      //###\r\n      //  outline: ${outline}\r\n      \r\n      //movieBossText.value.innerText = \"creating a fake end\";\r\n      alert(\"response end\")\r\n      console.log(response)\r\n    //movieBossText.value.innerText = response.data.choices[0].text.trim();\r\n    } catch (error) {\r\n      console.error('[Fetching bot reply] ERROR:', error);\r\n      // Handle errors as needed\r\n    } \r\n  };\r\n\r\n/*  \r\n  // Fetch Synopsis\r\n  const fetchSynopsis = async (outline) => {\r\n    try {\r\n      // API Call to OpenAI for Synopsis\r\n      const response = await openai.completions.create({\r\n        model: 'text-davinci-003',\r\n        prompt: `Generate an engaging, professional and marketable movie synopsis based on an outline. The synopsis should include actors names in brackets after each character. Choose actors that would be ideal for this role. \r\n        ###\r\n        outline: ${outline}\r\n        synopsis: \r\n        `,\r\n        max_tokens: 700,\r\n      });\r\n\r\n      const synopsis = response.data.choices[0].text.trim();\r\n      text.value = synopsis;\r\n      await fetchTitle(synopsis);\r\n      await fetchStars(synopsis);\r\n    } catch (error) {\r\n      console.error('Error fetching synopsis:', error);\r\n      // Handle errors as needed\r\n    } \r\n  };\r\n\r\n  // Fetch Movie Title\r\n  const fetchTitle = async (synopsis) => {\r\n    try {\r\n      // API Call to OpenAI for Movie Title\r\n      const response = await openai.completions.create({\r\n        model: 'text-davinci-003',\r\n        prompt: `Generate a catchy movie title for this synopsis: ${synopsis}`,\r\n        max_tokens: 25,\r\n        temperature: 0.7,\r\n      });\r\n\r\n      title.value = response.data.choices[0].text.trim();\r\n    } catch (error) {\r\n      console.error('Error fetching title:', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  // Fetch Cast Stars\r\n  const fetchStars = async (synopsis) => {\r\n    try {\r\n      // API Call to OpenAI for Cast Stars\r\n      const response = await openai.completions.create({\r\n        model: 'text-davinci-003',\r\n        prompt: `Extract the names in brackets from the synopsis.\r\n        ###\r\n        synopsis: ${synopsis}\r\n        names:   \r\n        `,\r\n        max_tokens: 30,\r\n      });\r\n\r\n      stars.value = response.data.choices[0].text.trim();\r\n    } catch (error) {\r\n      console.error('Error fetching stars:', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  // Fetch Image Prompt and URL\r\n  const fetchImagePrompt = async (title, synopsis) => {\r\n    try {\r\n      // API Call to OpenAI for Image Prompt\r\n      const response = await openai.completions.create({\r\n        model: 'text-davinci-003',\r\n        prompt: `Give a short description of an image which could be used to advertise a movie based on a title and synopsis. The description should be rich in visual detail but contain no names.\r\n        ###\r\n        title: ${title}\r\n        synopsis: ${synopsis}\r\n        image description: \r\n        `,\r\n        temperature: 0.8,\r\n        max_tokens: 100,\r\n      });\r\n\r\n      fetchImageUrl(response.data.choices[0].text.trim());\r\n    } catch (error) {\r\n      console.error('Error fetching image prompt:', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  // Fetch Image URL\r\n  const fetchImageUrl = async (imagePrompt) => {\r\n    try {\r\n      // API Call to OpenAI for Image URL\r\n      const response = await openai.images.generate({\r\n        prompt: `${imagePrompt}. There should be no text in this image.`,\r\n        n: 1,\r\n        size: '256x256',\r\n        response_format: 'b64_json',\r\n      });\r\n\r\n      imageUrl.value = `data:image/png;base64,${response.data.data[0].b64_json}`;\r\n      setupInputContainer.value.innerHTML = `<button id=\"view-pitch-btn\" class=\"view-pitch-btn\">View Pitch</button>`;\r\n      setupInputContainer.value.querySelector('#view-pitch-btn').addEventListener('click', () => {\r\n        setupInputContainer.value.querySelector('#setup-container').style.display = 'none';\r\n        setupInputContainer.value.querySelector('#output-container').style.display = 'flex';\r\n        movieBossText.value.innerText = `This idea is so good I'm jealous! It's gonna make you rich for sure! Remember, I want 10% ðŸ’°`;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching image URL:', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n*/\r\n\r\n  // Switch to Output View\r\n  const viewPitch = () => {\r\n    document.getElementById('setup-container').style.display = 'none';\r\n    document.getElementById('output-container').style.display = 'flex';\r\n    movieBossText.value.innerText = `This idea is so good I'm jealous! It's gonna make you rich for sure! Remember, I want 10% ðŸ’°`;\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n\r\nsection {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: var(--light);\r\n  border-radius: var(--border-rad-lg);\r\n  padding: 16px;\r\n  box-shadow: 0px 1px 18px 3px var(--dark);\r\n  max-width: 500px;\r\n  width: calc(100% - 32px);\r\n  z-index: 1000;\r\n}\r\n\r\n/* Setup */\r\n\r\n.setup-inner {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 24px 8px;\r\n  min-height: 234px;\r\n}\r\n\r\n.setup-inner>img {\r\n  width: 40%;\r\n  filter: drop-shadow(3px 2px 3px var(--medium-dark));\r\n  align-self: center;\r\n}\r\n\r\n.setup-input-container {\r\n  min-height: 74px;\r\n}\r\n\r\n.speech-bubble-ai {\r\n  max-width: 55%;\r\n  min-height: 124px;\r\n  border-radius: var(--border-rad-lg);\r\n  position: relative;\r\n  margin: 0;\r\n  border: 3px solid var(--medium-dark);\r\n  background-color: var(--white);\r\n  align-self: flex-start;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.speech-bubble-ai:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-left: 9px solid transparent;\r\n  border-right: 9px solid var(--medium-dark);\r\n  border-top: 9px solid var(--medium-dark);\r\n  border-bottom: 9px solid transparent;\r\n  left: -21px;\r\n  top: 64px;\r\n}\r\n\r\n.speech-bubble-ai:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-left: 7px solid transparent;\r\n  border-right: 7px solid var(--white);\r\n  border-top: 7px solid var(--white);\r\n  border-bottom: 7px solid transparent;\r\n  left: -11px;\r\n  top: 68px;\r\n}\r\n\r\n.speech-bubble-ai>p {\r\n  padding: 0 1.3em;\r\n  color: var(--dark);\r\n  font-size: 14px;\r\n}\r\n\r\ntextarea {\r\n  background-color: var(--light-grey);\r\n  padding: 8px;\r\n  border: none;\r\n  border-top-right-radius: 0;\r\n  border-top-left-radius: var(--border-rad-lg);\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: var(--border-rad-lg);\r\n  width: 100%;\r\n  resize: none;\r\n  min-height: 40px;\r\n  box-sizing: border-box;\r\n  font-family: 'Poppins', sans-serif;\r\n}\r\n\r\ntextarea::placeholder {\r\n  color: var(--medium-dark);\r\n  font-size: 14px;\r\n  opacity: 0.8;\r\n}\r\n\r\n/* Larger mobiles+ */\r\n\r\n@media(min-width: 380px) {\r\n  .setup-input-container {\r\n    padding-top: 0;\r\n  }\r\n\r\n  .speech-bubble-ai:before {\r\n    top: 92px;\r\n  }\r\n\r\n  .speech-bubble-ai:after {\r\n    top: 96px;\r\n  }\r\n\r\n  .speech-bubble-ai>p {\r\n    font-size: 16px;\r\n  }\r\n\r\n  textarea::placeholder {\r\n    font-size: 16px;\r\n    opacity: 0.8;\r\n  }\r\n}\r\n\r\n/* Buttons & SVG */\r\n\r\nbutton {\r\n  border: none;\r\n  background: var(--pink);\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: var(--dark);\r\n}\r\n\r\n.send-btn {\r\n  border-top-right-radius: var(--border-rad-lg);\r\n  border-bottom-right-radius: var(--border-rad-lg);\r\n  min-width: 50px;\r\n}\r\n\r\n.send-btn>img {\r\n  width: 1.6em;\r\n  vertical-align: middle;\r\n}\r\n\r\n.view-pitch-btn {\r\n  color: var(--light);\r\n  border-radius: var(--border-rad-lg);\r\n  padding: 16px;\r\n  margin: 4px auto;\r\n  display: block;\r\n  font-size: 18px;\r\n}\r\n\r\n.view-pitch-btn:hover {\r\n  box-shadow: 1px 1px 5px 1px var(--medium-dark);\r\n}\r\n\r\nimg.loading {\r\n  max-width: 40px;\r\n  filter: none;\r\n}\r\n\r\n/* Output */\r\n\r\n.output-container {\r\n  display: none;\r\n  flex-direction: column;\r\n  margin: 16px auto;\r\n  color: var(--dark);\r\n  padding: 16px;\r\n}\r\n\r\n.output-img-container>img {\r\n  width: 100%;\r\n  border-radius: var(--border-rad-lg);\r\n  box-shadow: 1px 1px 5px 1px var(--dark);\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}