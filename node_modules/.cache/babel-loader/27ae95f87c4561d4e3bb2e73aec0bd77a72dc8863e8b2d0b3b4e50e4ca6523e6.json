{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '../assets/movieboss.png';\nimport _imports_1 from '../assets/send-btn-icon.png';\nconst _withScopeId = n => (_pushScopeId(\"data-v-3c1597c0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"setup-container\"\n};\nconst _hoisted_2 = {\n  class: \"setup-inner\",\n  width: \"850px\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"MovieBoss\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = {\n  border: \"1\"\n};\nconst _hoisted_5 = {\n  class: \"speech-bubble-ai\",\n  ref: \"speechBubble\"\n};\nconst _hoisted_6 = {\n  ref: \"processingText\"\n};\nconst _hoisted_7 = {\n  class: \"speech-bubble-ai\",\n  ref: \"speechBubble\"\n};\nconst _hoisted_8 = {\n  ref: \"adTitleText\"\n};\nconst _hoisted_9 = {\n  class: \"speech-bubble-ai\",\n  ref: \"speechBubble\"\n};\nconst _hoisted_10 = {\n  ref: \"adURLText\"\n};\nconst _hoisted_11 = {\n  class: \"setup-inner setup-input-container\",\n  ref: \"setupInputContainer\"\n};\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_1,\n  alt: \"send\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_13 = [_hoisted_12];\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"section\", {\n  class: \"output-container\",\n  id: \"output-container\"\n}, null, -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"section\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"table\", _hoisted_4, [_createElementVNode(\"tr\", null, [_createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"p\", _hoisted_6, \" Give me one line sentence concept, and I'll give you a title and a URL-poster! \", 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */)])]), _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"p\", _hoisted_8, \" title \", 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */)])]), _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", null, [_createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"p\", _hoisted_10, \" url \", 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */)])])])]), _createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.userInput = $event),\n    id: \"setup-textarea\",\n    placeholder: \"Excited to learn, ask me anything you want.\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.userInput]]), _createElementVNode(\"button\", {\n    onClick: $setup.submitSetup,\n    class: \"send-btn\",\n    id: \"send-btn\",\n    \"aria-label\": \"send\"\n  }, [..._hoisted_13])], 512 /* NEED_PATCH */)]), _hoisted_14]);\n}","map":{"version":3,"names":["_imports_0","_imports_1","id","class","width","_createElementVNode","src","alt","border","ref","_hoisted_12","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_cache","$event","$setup","userInput","placeholder","onClick","submitSetup","_hoisted_13","_hoisted_14"],"sources":["C:\\Users\\btina\\LLM\\vue-app\\src\\components\\MoviePitch.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <section id=\"setup-container\" >\r\n      <div class=\"setup-inner\" width=\"850px\">\r\n        <img src=\"../assets/movieboss.png\" alt=\"MovieBoss\">\r\n        <table border=\"1\">\r\n            <tr>\r\n                <td>\r\n                  <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n                    <p ref=\"processingText\">\r\n                      Give me one line sentence concept, and I'll give you a title and a URL-poster!\r\n                    </p>\r\n                  </div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                  <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n                    <p ref=\"adTitleText\">\r\n                      title\r\n                    </p>\r\n                  </div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                  <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n                    <p ref=\"adURLText\">\r\n                      url\r\n                    </p>\r\n                  </div>  \r\n                </td>\r\n            </tr>\r\n        </table>        \r\n      </div>\r\n      <div class=\"setup-inner setup-input-container\" ref=\"setupInputContainer\">\r\n        <textarea v-model=\"userInput\" id=\"setup-textarea\" placeholder=\"Excited to learn, ask me anything you want.\"></textarea>\r\n        <button @click=\"submitSetup\" class=\"send-btn\" id=\"send-btn\" aria-label=\"send\">\r\n          <img src=\"../assets/send-btn-icon.png\" alt=\"send\">\r\n        </button>\r\n      </div>\r\n    </section>\r\n    <section class=\"output-container\" id=\"output-container\">                 \r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n  import { ref } from 'vue';\r\n  //NEW (i.e., OpenAI NodeJS SDK v4)\r\n  import OpenAI from 'openai';\r\n  \r\n  const key='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'\r\n\r\n  //const dotenv = require('dotenv');\r\n  //dotenv.config(); \r\n  //process.env.OPENAI_API_KEY \r\n\r\n\r\n  const openai = new OpenAI({\r\n  apiKey: key, // This is also the default, can be omitted\r\n  dangerouslyAllowBrowser: true  //Enable this due we do not have a client/server architecture\r\n  }); \r\n\r\n  \r\n  // Reactive Variables\r\n  const userInput = ref(\"\");\r\n  const setupInputContainer = ref(null);\r\n  const processingText = ref(null);\r\n  const adTitleText = ref(null);\r\n  const adURLText = ref(null);\r\n  \r\n\r\n  // Show Loading Indicator\r\n  const showLoadingIndicator = () => {\r\n    setupInputContainer.value.innerHTML = `<img src=\"../assets/loading.svg\" class=\"loading\" id=\"loading\">`;\r\n    processingText.value.innerText = `Ok, just wait a second while my digital brain digests that...`;\r\n    adTitleText.value.innerText = `.. `;\r\n    adURLText.value.innerText = `.. `;\r\n  };\r\n\r\n  // Submit User Input\r\n  const submitSetup = () => {\r\n    if (userInput.value) {\r\n      showLoadingIndicator();\r\n      fetchBotReply(userInput.value);\r\n    //fetchSynopsis(userInput.value);\r\n      var title = fetchTitle(userInput.value);    \r\n      fetchImagePrompt(title,userInput.value);\r\n    }\r\n  };\r\n\r\n  // FetchBot Reply\r\n  const fetchBotReply = async (outline) => {\r\n    try {      \r\n    \r\n      //API Call to OpenAI for Bot Reply\r\n      const response = await openai.completions.create({\r\n      model: 'gpt-3.5-turbo-instruct', \r\n      prompt: `Generate a short message that talks enthusiastically about outline and sounds interesting.\r\n        ###\r\n        outline: ${outline}\r\n        message: \r\n        `,\r\n      temperature: 0.8,\r\n      max_tokens: 60\r\n      }).then(response => {\r\n        console.log('REPLY BOT Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim())\r\n        console.log('.....');\r\n        setTimeout(function(){\r\n        console.log('timeout end..');\r\n        },5000);\r\n      });\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      console.error('[FetchBot Reply] ERROR:', error);\r\n      // Handle errors as needed\r\n    } \r\n  };\r\n\r\n\r\n  /*\r\n  // Fetch Synopsis\r\n  const fetchSynopsis = async (outline) => {\r\n    try {\r\n      var synopsis = \" \";\r\n      // API Call to OpenAI for Synopsis\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Generate an engaging, professional and marketable movie synopsis based on an outline. \r\n        The synopsis should include actors names in brackets after each character. \r\n        Choose actors that would be ideal for this role. \r\n        ###\r\n        outline: ${outline}\r\n        synopsis: \r\n        `,\r\n        max_tokens: 700,\r\n      }).then(response => {\r\n        console.log('Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim());\r\n        console.log('----');\r\n        setTimeout(function(){\r\n        console.log('timeout ended');\r\n        },10000);\r\n        synopsis = response.choices[0].text.trim();\r\n        //alert(synopsis)\r\n      });\r\n\r\n      console.log(response)\r\n      return synopsis\r\n\r\n     //await fetchTitle(synopsis);\r\n     //await fetchStars(synopsis);\r\n\r\n    } catch (error) {\r\n      console.error('[Fetch Synopsis] ERROR:', error);\r\n      // Handle errors as needed\r\n    } \r\n  };\r\n  */\r\n  \r\n\r\n  // Fetch Ad Title\r\n  const fetchTitle = async (userInput) => {\r\n    try {\r\n     \r\n      var titleFinished=\" \"\r\n      // API Call to OpenAI for Ad Title\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Generate a catchy advertising title for a product or service for input provided. Between 5 to 10 words: ${userInput}`,\r\n        max_tokens: 25,\r\n        temperature: 1.0, //more creative\r\n      }).then(response => {\r\n        console.log('TITLE Finished[' + response.choices[0].finish_reason + '] = ' + response.choices[0].text)\r\n  \r\n        titleFinished =  '[' + response.choices[0].finish_reason + '] = ' + response.choices[0].text\r\n        adTitleText.value.innerText = titleFinished\r\n        console.log('....');\r\n        setTimeout(function(){\r\n        console.log('timeout');\r\n        },10000);\r\n        \r\n      });\r\n      console.log(response)\r\n    } catch (error) {\r\n      console.error('[Fetch Title] ERROR:', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  /*\r\n  // Fetch Cast Stars\r\n  const fetchStars = async (synopsis) => {\r\n    try {\r\n      \r\n      // API Call to OpenAI for Cast Stars\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Extract the names in brackets from the synopsis.\r\n        ###\r\n        synopsis: ${synopsis}\r\n        names:   \r\n        `,\r\n        max_tokens: 30,\r\n      }).then(response => {\r\n        console.log(response.choices[0].text.trim())\r\n        console.log(response.choices[0].finish_reason)\r\n        console.log(response.choices)\r\n        //processingText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\r\n        console.log('before');\r\n\r\n        setTimeout(function(){\r\n        console.log('after');\r\n        },5000);\r\n      });\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      console.error('[Fetch Stars] ERROR :', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n  */\r\n\r\n  // Fetch Image Prompt and URL\r\n  const fetchImagePrompt = async (title,userInput) => {\r\n    try {\r\n      //synopsis: ${synopsis}\r\n      // API Call to OpenAI for Image Prompt\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Give a short description of an image that can be used to advertise a product or service based on title provided. The description should be rich in visual detail and but should not exceed more than 20 words.\r\n        ###\r\n        title: ${title}\r\n        userInput: ${userInput}\r\n        image description: \r\n        `,\r\n        temperature: 0.8,\r\n        max_tokens: 50,\r\n      }).then(response => {\r\n        console.log('IMAGE DESCRIPTION Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim())\r\n        console.log('.....');\r\n        setTimeout(function(){\r\n        console.log('timeout end');\r\n        },10000);        \r\n        fetchImageUrl(response.choices[0].text.trim())\r\n      });\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      console.error('[Fetch ImagePrompt] ERROR', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n/*\r\n  function downloadImage(url, filepath) {\r\n    console.log(filepath);\r\n    // Create an <a> element\r\n    const element = document.createElement('a');\r\n    // Set the href to the image URL\r\n    element.href = url;\r\n    // Use the 'download' attribute to define the filename\r\n    element.download = 'generatedImage.jpg' || 'download';\r\n    // Append the <a> element to the document body temporarily\r\n    document.body.appendChild(element);\r\n    // Trigger the download by simulating a click\r\n    element.click();\r\n    // Clean up and remove the <a> element from the document\r\n    document.body.removeChild(element);\r\n}  \r\n*/\r\n\r\n/*\r\n// Function to download an image from a URL and save it to a file\r\nfunction downloadImage(url, filePath) {\r\n  return new Promise((resolve, reject) => {\r\n    https.get(url, (res) => {\r\n      const stream = fs.createWriteStream(filePath);\r\n      res.pipe(stream);\r\n      stream.on(\"finish\", () => {\r\n        stream.close();\r\n        resolve(filePath);\r\n      });\r\n    }).on(\"error\", (err) => {\r\n      reject(err);\r\n    });\r\n  });\r\n}\r\n*/\r\n\r\n  // Fetch Image URL\r\n  const fetchImageUrl = async (imagePrompt) => {\r\n    try {\r\n   \r\n    console.log(imagePrompt);\r\n    alert(\"IMAGE DESCRIPTION\"+imagePrompt)\r\n\r\n    //var generatedURL =\"\"\r\n    // API Call to OpenAI for Image URL\r\n    const response = await openai.images.generate({\r\n        prompt: `${imagePrompt}. There should be no text in this image.`,\r\n        n: 1,\r\n        size: '256x256',\r\n        //response_format: 'b64_json',\r\n      }).then(response => {\r\n        console.log('RESPONSE imageURL', response.data)\r\n        console.log('Generated Image URL: ',response.data[0].url)\r\n        adURLText.value.innerText = response.data[0].url\r\n        //generatedURL = response.data[0].url \r\n        //imageUrl.value = `data:image/png;base64,${response.data[0].b64_json}`;\r\n        console.log('before');\r\n        setTimeout(function(){\r\n        console.log('after');\r\n        },10000);\r\n      });\r\n\r\n      //Specify a path to save the downloaded image\r\n      //const imagePath = \"../assets/generatedImage.jpg\";\r\n\r\n      // Download and save the image\r\n      // downloadImage(generatedURL, imagePath);\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      console.log(error.response.headers);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.log(error.request);\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.log('Error', error.message);\r\n    }\r\n      console.log('[Fetch ImageURL] ERROR:', error.message);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  /*\r\n  // Switch to Output View\r\n  const viewPitch = () => {\r\n    document.getElementById('setup-container').style.display = 'none';\r\n    document.getElementById('output-container').style.display = 'flex';\r\n    movieBossText.value.innerText = `This idea is so good. Remember, I want 10% 💰`;\r\n  };\r\n  */\r\n</script>\r\n\r\n<style scoped>\r\n\r\nsection {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: var(--light);\r\n  border-radius: var(--border-rad-lg);\r\n  padding: 16px;\r\n  box-shadow: 0px 1px 18px 3px var(--dark);\r\n  max-width: 1000px;\r\n  width: calc(100% - 32px);\r\n  z-index: 1000;\r\n}\r\n\r\n/* Setup */\r\n\r\n.setup-inner {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 24px 8px;\r\n  min-height: 234px;\r\n}\r\n\r\n.setup-inner>img {\r\n  width: 50%;\r\n  filter: drop-shadow(3px 2px 3px var(--medium-dark));\r\n  align-self: center;\r\n}\r\n\r\n.setup-input-container {\r\n  min-height: 74px;\r\n}\r\n\r\n.speech-bubble-ai {\r\n  max-width: 55%;\r\n  min-height: 124px;\r\n  border-radius: var(--border-rad-lg);\r\n  position: relative;\r\n  margin: 0;\r\n  border: 3px solid var(--medium-dark);\r\n  background-color: var(--white);\r\n  align-self: flex-start;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.speech-bubble-ai:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-left: 9px solid transparent;\r\n  border-right: 9px solid var(--medium-dark);\r\n  border-top: 9px solid var(--medium-dark);\r\n  border-bottom: 9px solid transparent;\r\n  left: -21px;\r\n  top: 64px;\r\n}\r\n\r\n.speech-bubble-ai:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-left: 7px solid transparent;\r\n  border-right: 7px solid var(--white);\r\n  border-top: 7px solid var(--white);\r\n  border-bottom: 7px solid transparent;\r\n  left: -11px;\r\n  top: 68px;\r\n}\r\n\r\n.speech-bubble-ai>p {\r\n  padding: 0 1.3em;\r\n  color: var(--dark);\r\n  font-size: 14px;\r\n}\r\n\r\ntextarea {\r\n  background-color: var(--light-grey);\r\n  padding: 8px;\r\n  border: none;\r\n  border-top-right-radius: 0;\r\n  border-top-left-radius: var(--border-rad-lg);\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: var(--border-rad-lg);\r\n  width: 100%;\r\n  resize: none;\r\n  min-height: 40px;\r\n  box-sizing: border-box;\r\n  font-family: 'Poppins', sans-serif;\r\n}\r\n\r\ntextarea::placeholder {\r\n  color: var(--medium-dark);\r\n  font-size: 14px;\r\n  opacity: 0.8;\r\n}\r\n\r\n/* Larger mobiles+ */\r\n@media(min-width: 380px) {\r\n  .setup-input-container {\r\n    padding-top: 0;\r\n  }\r\n\r\n  .speech-bubble-ai:before {\r\n    top: 92px;\r\n  }\r\n\r\n  .speech-bubble-ai:after {\r\n    top: 96px;\r\n  }\r\n\r\n  .speech-bubble-ai>p {\r\n    font-size: 16px;\r\n  }\r\n\r\n  textarea::placeholder {\r\n    font-size: 16px;\r\n    opacity: 0.8;\r\n  }\r\n}\r\n\r\n/* Buttons & SVG */\r\nbutton {\r\n  border: none;\r\n  background: var(--pink);\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: var(--dark);\r\n}\r\n\r\n.send-btn {\r\n  border-top-right-radius: var(--border-rad-lg);\r\n  border-bottom-right-radius: var(--border-rad-lg);\r\n  min-width: 50px;\r\n}\r\n\r\n.send-btn>img {\r\n  width: 1.6em;\r\n  vertical-align: middle;\r\n}\r\n\r\n.view-pitch-btn {\r\n  color: var(--light);\r\n  border-radius: var(--border-rad-lg);\r\n  padding: 16px;\r\n  margin: 4px auto;\r\n  display: block;\r\n  font-size: 18px;\r\n}\r\n\r\n.view-pitch-btn:hover {\r\n  box-shadow: 1px 1px 5px 1px var(--medium-dark);\r\n}\r\n\r\nimg.loading {\r\n  max-width: 50px;\r\n  filter: none;\r\n}\r\n\r\n/* Output */\r\n.output-container {\r\n  display: none;\r\n  flex-direction: column;\r\n  margin: 16px auto;\r\n  color: var(--dark);\r\n  padding: 16px;\r\n}\r\n\r\n.output-img-container>img {\r\n  width: 90%;\r\n  border-radius: var(--border-rad-lg);\r\n  box-shadow: 2px 2px 6px 2px var(--dark);\r\n}\r\n\r\n</style>"],"mappings":";OAIaA,UAA6B;OAkC3BC,UAAiC;;;EApCnCC,EAAE,EAAC;AAAiB;;EACtBC,KAAK,EAAC,aAAa;EAACC,KAAK,EAAC;;gEAC7BC,mBAAA,CAAmD;EAA9CC,GAA6B,EAA7BN,UAA6B;EAACO,GAAG,EAAC;;;EAChCC,MAAM,EAAC;AAAG;;EAGFL,KAAK,EAAC,kBAAkB;EAACM,GAAG,EAAC;;;EAC7BA,GAAG,EAAC;AAAgB;;EAQpBN,KAAK,EAAC,kBAAkB;EAACM,GAAG,EAAC;;;EAC7BA,GAAG,EAAC;AAAa;;EAQjBN,KAAK,EAAC,kBAAkB;EAACM,GAAG,EAAC;;;EAC7BA,GAAG,EAAC;AAAW;;EAQ3BN,KAAK,EAAC,mCAAmC;EAACM,GAAG,EAAC;;iEAG/CJ,mBAAA,CAAkD;EAA7CC,GAAiC,EAAjCL,UAAiC;EAACM,GAAG,EAAC;;qBAA3CG,WAAkD,C;iEAIxDL,mBAAA,CACU;EADDF,KAAK,EAAC,kBAAkB;EAACD,EAAE,EAAC;;;uBAzCvCS,mBAAA,CA2CM,cA1CJN,mBAAA,CAuCU,WAvCVO,UAuCU,GAtCRP,mBAAA,CA+BM,OA/BNQ,UA+BM,GA9BJC,UAAmD,EACnDT,mBAAA,CA4BQ,SA5BRU,UA4BQ,GA3BJV,mBAAA,CAQK,aAPDA,mBAAA,CAMK,aALHA,mBAAA,CAIM,OAJNW,UAIM,GAHJX,mBAAA,CAEI,KAFJY,UAEI,EAFoB,kFAExB,wB,6BAIRZ,mBAAA,CAQK,aAPDA,mBAAA,CAMK,aALHA,mBAAA,CAIM,OAJNa,UAIM,GAHJb,mBAAA,CAEI,KAFJc,UAEI,EAFiB,SAErB,wB,6BAIRd,mBAAA,CAQK,aAPDA,mBAAA,CAMK,aALHA,mBAAA,CAIM,OAJNe,UAIM,GAHJf,mBAAA,CAEI,KAFJgB,WAEI,EAFe,OAEnB,wB,iCAMdhB,mBAAA,CAKM,OALNiB,WAKM,G,gBAJJjB,mBAAA,CAAuH;IApC/H,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAoC2BC,MAAA,CAAAC,SAAS,GAAAF,MAAA;IAAEtB,EAAE,EAAC,gBAAgB;IAACyB,WAAW,EAAC;iDAA3CF,MAAA,CAAAC,SAAS,E,GAC5BrB,mBAAA,CAES;IAFAuB,OAAK,EAAEH,MAAA,CAAAI,WAAW;IAAE1B,KAAK,EAAC,UAAU;IAACD,EAAE,EAAC,UAAU;IAAC,YAAU,EAAC;KArC/E,IAAA4B,WAAA,G,2BA0CIC,WACU,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}