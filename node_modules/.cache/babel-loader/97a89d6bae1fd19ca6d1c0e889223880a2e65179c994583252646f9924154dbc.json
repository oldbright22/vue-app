{"ast":null,"code":"import { ref } from 'vue';\n//NEW (i.e., OpenAI NodeJS SDK v4)\nimport OpenAI from 'openai';\nconst key = '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';\n\n//const dotenv = require('dotenv');\n//dotenv.config(); \n//process.env.OPENAI_API_KEY \n\nexport default {\n  __name: 'MoviePitch',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const openai = new OpenAI({\n      apiKey: key,\n      // This is also the default, can be omitted\n      dangerouslyAllowBrowser: true //Enable this due we do not have a client/server architecture\n    });\n\n    // Reactive Variables\n    const userInput = ref(\"\");\n    const setupInputContainer = ref(null);\n    const processingText = ref(null);\n    const adTitleText = ref(null);\n    const adURLText = ref(null);\n\n    // Show Loading Indicator\n    const showLoadingIndicator = () => {\n      setupInputContainer.value.innerHTML = `<img src=\"../assets/loading.svg\" class=\"loading\" id=\"loading\">`;\n      processingText.value.innerText = `Ok, just wait a second while my digital brain digests that...`;\n      adTitleText.value.innerText = `.. `;\n      adURLText.value.innerText = `.. `;\n    };\n\n    // ------------------------------------------------------------------------\n    // START POINT: \n    //-------------------------------------------------------------------------\n    // 1> User submits a input [userInput]\n    // \n    // Following actions are auto-triggered in sequence and using [userInput] provided:\n    //\n    // 2> FETCH TA new Advertising Title its generated based on [userInput] provided\n    // 3> A new Short Image Description its generated based on [title] and [userInput] provided\n    // 4> A new Image URL its generated per [Image Description] generated by the model\n    // \n    const submitSetup = () => {\n      if (userInput.value) {\n        //Initialize UI fields - notify end-user his/her request is under processing \n        showLoadingIndicator();\n\n        //trigger aut0\n        var title = fetchTitle(userInput.value);\n        fetchImagePrompt(title, userInput.value);\n\n        //Below calls are not longer needed for the purpose of this exercise.  \n        //fetchSynopsis(userInput.value);   -- Example of additional call to LLM with a more roboust effort - by creating a long synopsis \n        //fetchBotReply(userInput.value);   -- Example of additional call to LLM with a simple request to LLM  \n      }\n    };\n\n    /*\r\n    // Fetch Synopsis\r\n    const fetchSynopsis = async (outline) => {\r\n      try {\r\n        var synopsis = \" \";\r\n        // API Call to OpenAI for Synopsis\r\n        const response = await openai.completions.create({\r\n          model: 'gpt-3.5-turbo-instruct',\r\n          prompt: `Generate an engaging, professional and marketable movie synopsis based on an outline. \r\n          The synopsis should include actors names in brackets after each character. \r\n          Choose actors that would be ideal for this role. \r\n          ###\r\n          outline: ${outline}\r\n          synopsis: \r\n          `,\r\n          max_tokens: 700,\r\n        }).then(response => {\r\n          console.log('Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim());\r\n          console.log('----');\r\n          setTimeout(function(){\r\n          console.log('timeout ended');\r\n          },10000);\r\n          synopsis = response.choices[0].text.trim();\r\n          //alert(synopsis)\r\n        });\r\n          console.log(response)\r\n        return synopsis\r\n         //await fetchTitle(synopsis);\r\n       //await fetchStars(synopsis);\r\n        } catch (error) {\r\n        console.error('[Fetch Synopsis] ERROR:', error);\r\n        // Handle errors as needed\r\n      } \r\n    };\r\n    \r\n    // Fetch Cast Stars\r\n    const fetchStars = async (synopsis) => {\r\n      try {\r\n        \r\n        // API Call to OpenAI for Cast Stars\r\n        const response = await openai.completions.create({\r\n          model: 'gpt-3.5-turbo-instruct',\r\n          prompt: `Extract the names in brackets from the synopsis.\r\n          ###\r\n          synopsis: ${synopsis}\r\n          names:   \r\n          `,\r\n          max_tokens: 30,\r\n        }).then(response => {\r\n          console.log(response.choices[0].text.trim())\r\n          console.log(response.choices[0].finish_reason)\r\n          console.log(response.choices)\r\n          //processingText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\r\n          console.log('before');\r\n            setTimeout(function(){\r\n          console.log('after');\r\n          },5000);\r\n        });\r\n        console.log(response)\r\n        } catch (error) {\r\n        console.error('[Fetch Stars] ERROR :', error);\r\n        // Handle errors as needed\r\n      }\r\n    };\r\n    // FetchBot Reply\r\n    const fetchBotReply = async (outline) => {\r\n      try {      \r\n      \r\n        //API Call to OpenAI for Bot Reply\r\n        const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct', \r\n        prompt: `Generate a short message that talks enthusiastically about outline and sounds interesting.\r\n          ###\r\n          outline: ${outline}\r\n          message: \r\n          `,\r\n        temperature: 0.8,\r\n        max_tokens: 60\r\n        }).then(response => {\r\n          console.log('REPLY BOT Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim())\r\n          console.log('.....');\r\n          setTimeout(function(){\r\n          console.log('timeout end..');\r\n          },5000);\r\n        });\r\n        console.log(response)\r\n        } catch (error) {\r\n        if (error.response) {\r\n            // The request was made and the server responded with a status code\r\n            console.log(error.response.data);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n          } else if (error.request) {\r\n            // The request was made but no response was received\r\n            console.log(error.request);\r\n          } else {\r\n            // Something else happened during the request that triggered an error\r\n            console.log('Error', error.message);\r\n          }\r\n        } \r\n    };\r\n      */\n\n    // Fetch Ad Title\n    const fetchTitle = async userInput => {\n      try {\n        var titleFinished = \" \";\n\n        // API Call to OpenAI for Ad Title\n        const response = await openai.completions.create({\n          model: 'gpt-3.5-turbo-instruct',\n          prompt: `Generate a catchy advertising title for a product or service for input provided. Between 5 to 10 words: ${userInput}`,\n          max_tokens: 25,\n          temperature: 1.0 //more creative\n        }).then(response => {\n          console.log('TITLE Finished[' + response.choices[0].finish_reason + '] = ' + response.choices[0].text);\n          titleFinished = '[' + response.choices[0].finish_reason + '] = ' + response.choices[0].text;\n          adTitleText.value.innerText = titleFinished;\n          console.log('....');\n          setTimeout(function () {\n            console.log('timeout');\n          }, 10000);\n        });\n        console.log(response);\n      } catch (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something else happened during the request that triggered an error\n          console.log('Error', error.message);\n        }\n      }\n    };\n\n    // Fetch Image Prompt and URL\n    const fetchImagePrompt = async (title, userInput) => {\n      try {\n        //synopsis: ${synopsis}\n        // API Call to OpenAI for Image Prompt\n        const response = await openai.completions.create({\n          model: 'gpt-3.5-turbo-instruct',\n          prompt: `Give a short description of an image that can be used to advertise a product or service based on title provided. The description should be rich in visual detail and but should not exceed more than 20 words.\n        ###\n        title: ${title}\n        userInput: ${userInput}\n        image description: \n        `,\n          temperature: 0.8,\n          max_tokens: 50\n        }).then(response => {\n          console.log('IMAGE DESCRIPTION Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim());\n          console.log('.....');\n          setTimeout(function () {\n            console.log('timeout end');\n          }, 10000);\n          fetchImageUrl(response.choices[0].text.trim());\n        });\n        console.log(response);\n      } catch (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something else happened during the request that triggered an error\n          console.log('Error', error.message);\n        }\n      }\n    };\n\n    // Fetch Image URL\n    const fetchImageUrl = async imagePrompt => {\n      try {\n        console.log(imagePrompt);\n        alert(\"IMAGE DESCRIPTION= \" + imagePrompt);\n\n        // API Call to OpenAI for Image URL\n        const response = await openai.images.generate({\n          prompt: `${imagePrompt}. There should be no text in this image.`,\n          n: 1,\n          size: '256x256'\n          //response_format: 'b64_json',\n        }).then(response => {\n          console.log('Image URL = response.data', response.data);\n          console.log('Generated Image URL: ', response.data[0].url);\n          adURLText.value.innerText = response.data[0].url;\n          //imageUrl.value = `data:image/png;base64,${response.data[0].b64_json}`;\n          console.log('....');\n          setTimeout(function () {\n            console.log('timeout end');\n          }, 10000);\n        });\n        console.log(response);\n      } catch (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something else happened during the request that triggered an error\n          console.log('Error', error.message);\n        }\n      }\n    };\n\n    /*\r\n    // Switch to Output View\r\n    const viewPitch = () => {\r\n      document.getElementById('setup-container').style.display = 'none';\r\n      document.getElementById('output-container').style.display = 'flex';\r\n      movieBossText.value.innerText = `This idea is so good. Remember, I want 10% 💰`;\r\n    };\r\n    */\n\n    const __returned__ = {\n      key,\n      openai,\n      userInput,\n      setupInputContainer,\n      processingText,\n      adTitleText,\n      adURLText,\n      showLoadingIndicator,\n      submitSetup,\n      fetchTitle,\n      fetchImagePrompt,\n      fetchImageUrl,\n      ref,\n      get OpenAI() {\n        return OpenAI;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","OpenAI","key","openai","apiKey","dangerouslyAllowBrowser","userInput","setupInputContainer","processingText","adTitleText","adURLText","showLoadingIndicator","value","innerHTML","innerText","submitSetup","title","fetchTitle","fetchImagePrompt","titleFinished","response","completions","create","model","prompt","max_tokens","temperature","then","console","log","choices","finish_reason","text","setTimeout","error","data","status","headers","request","message","trim","fetchImageUrl","imagePrompt","alert","images","generate","n","size","url"],"sources":["C:/Users/btina/LLM/vue-app/src/components/MoviePitch.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <section id=\"setup-container\" >\r\n      <div class=\"setup-inner\" width=\"850px\">\r\n        <img src=\"../assets/movieboss.png\" alt=\"MovieBoss\">\r\n        <table border=\"1\">\r\n            <tr>\r\n                <td>\r\n                  <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n                    <p ref=\"processingText\">\r\n                      Give me one line sentence concept, and I'll give you a title and a URL-poster!\r\n                    </p>\r\n                  </div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                  <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n                    <p ref=\"adTitleText\">\r\n                      title\r\n                    </p>\r\n                  </div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                  <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n                    <p ref=\"adURLText\">\r\n                      url\r\n                    </p>\r\n                  </div>  \r\n                </td>\r\n            </tr>\r\n        </table>        \r\n      </div>\r\n      <div class=\"setup-inner setup-input-container\" ref=\"setupInputContainer\">\r\n        <textarea v-model=\"userInput\" id=\"setup-textarea\" placeholder=\"Excited to learn, ask me anything you want.\"></textarea>\r\n        <button @click=\"submitSetup\" class=\"send-btn\" id=\"send-btn\" aria-label=\"send\">\r\n          <img src=\"../assets/send-btn-icon.png\" alt=\"send\">\r\n        </button>\r\n      </div>\r\n    </section>\r\n    <section class=\"output-container\" id=\"output-container\">                 \r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n  import { ref } from 'vue';\r\n  //NEW (i.e., OpenAI NodeJS SDK v4)\r\n  import OpenAI from 'openai';\r\n  \r\n  const key='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'\r\n\r\n  //const dotenv = require('dotenv');\r\n  //dotenv.config(); \r\n  //process.env.OPENAI_API_KEY \r\n\r\n\r\n  const openai = new OpenAI({\r\n  apiKey: key, // This is also the default, can be omitted\r\n  dangerouslyAllowBrowser: true  //Enable this due we do not have a client/server architecture\r\n  }); \r\n\r\n\r\n  // Reactive Variables\r\n  const userInput = ref(\"\");\r\n  const setupInputContainer = ref(null);\r\n  const processingText = ref(null);\r\n  const adTitleText = ref(null);\r\n  const adURLText = ref(null);\r\n  \r\n\r\n  // Show Loading Indicator\r\n  const showLoadingIndicator = () => {\r\n    setupInputContainer.value.innerHTML = `<img src=\"../assets/loading.svg\" class=\"loading\" id=\"loading\">`;\r\n    processingText.value.innerText = `Ok, just wait a second while my digital brain digests that...`;\r\n    adTitleText.value.innerText = `.. `;\r\n    adURLText.value.innerText = `.. `;\r\n  };\r\n\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // START POINT: \r\n  //-------------------------------------------------------------------------\r\n  // 1> User submits a input [userInput]\r\n  // \r\n  // Following actions are auto-triggered in sequence and using [userInput] provided:\r\n  //\r\n  // 2> FETCH TA new Advertising Title its generated based on [userInput] provided\r\n  // 3> A new Short Image Description its generated based on [title] and [userInput] provided\r\n  // 4> A new Image URL its generated per [Image Description] generated by the model\r\n  // \r\n  const submitSetup = () => {\r\n    if (userInput.value) {\r\n      \r\n      //Initialize UI fields - notify end-user his/her request is under processing \r\n      showLoadingIndicator();\r\n      \r\n      //trigger aut0\r\n      var title = fetchTitle(userInput.value);    \r\n      fetchImagePrompt(title,userInput.value);\r\n\r\n    //Below calls are not longer needed for the purpose of this exercise.  \r\n    //fetchSynopsis(userInput.value);   -- Example of additional call to LLM with a more roboust effort - by creating a long synopsis \r\n    //fetchBotReply(userInput.value);   -- Example of additional call to LLM with a simple request to LLM  \r\n   }\r\n  };\r\n\r\n\r\n  \r\n  /*\r\n  // Fetch Synopsis\r\n  const fetchSynopsis = async (outline) => {\r\n    try {\r\n      var synopsis = \" \";\r\n      // API Call to OpenAI for Synopsis\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Generate an engaging, professional and marketable movie synopsis based on an outline. \r\n        The synopsis should include actors names in brackets after each character. \r\n        Choose actors that would be ideal for this role. \r\n        ###\r\n        outline: ${outline}\r\n        synopsis: \r\n        `,\r\n        max_tokens: 700,\r\n      }).then(response => {\r\n        console.log('Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim());\r\n        console.log('----');\r\n        setTimeout(function(){\r\n        console.log('timeout ended');\r\n        },10000);\r\n        synopsis = response.choices[0].text.trim();\r\n        //alert(synopsis)\r\n      });\r\n\r\n      console.log(response)\r\n      return synopsis\r\n\r\n     //await fetchTitle(synopsis);\r\n     //await fetchStars(synopsis);\r\n\r\n    } catch (error) {\r\n      console.error('[Fetch Synopsis] ERROR:', error);\r\n      // Handle errors as needed\r\n    } \r\n  };\r\n  \r\n  // Fetch Cast Stars\r\n  const fetchStars = async (synopsis) => {\r\n    try {\r\n      \r\n      // API Call to OpenAI for Cast Stars\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Extract the names in brackets from the synopsis.\r\n        ###\r\n        synopsis: ${synopsis}\r\n        names:   \r\n        `,\r\n        max_tokens: 30,\r\n      }).then(response => {\r\n        console.log(response.choices[0].text.trim())\r\n        console.log(response.choices[0].finish_reason)\r\n        console.log(response.choices)\r\n        //processingText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\r\n        console.log('before');\r\n\r\n        setTimeout(function(){\r\n        console.log('after');\r\n        },5000);\r\n      });\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      console.error('[Fetch Stars] ERROR :', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n// FetchBot Reply\r\n  const fetchBotReply = async (outline) => {\r\n    try {      \r\n    \r\n      //API Call to OpenAI for Bot Reply\r\n      const response = await openai.completions.create({\r\n      model: 'gpt-3.5-turbo-instruct', \r\n      prompt: `Generate a short message that talks enthusiastically about outline and sounds interesting.\r\n        ###\r\n        outline: ${outline}\r\n        message: \r\n        `,\r\n      temperature: 0.8,\r\n      max_tokens: 60\r\n      }).then(response => {\r\n        console.log('REPLY BOT Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim())\r\n        console.log('.....');\r\n        setTimeout(function(){\r\n        console.log('timeout end..');\r\n        },5000);\r\n      });\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something else happened during the request that triggered an error\r\n          console.log('Error', error.message);\r\n        }\r\n\r\n    } \r\n  };\r\n\r\n  */\r\n  \r\n\r\n  // Fetch Ad Title\r\n  const fetchTitle = async (userInput) => {\r\n    try {\r\n     \r\n      var titleFinished=\" \"\r\n\r\n      // API Call to OpenAI for Ad Title\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Generate a catchy advertising title for a product or service for input provided. Between 5 to 10 words: ${userInput}`,\r\n        max_tokens: 25,\r\n        temperature: 1.0, //more creative\r\n      }).then(response => {\r\n        console.log('TITLE Finished[' + response.choices[0].finish_reason + '] = ' + response.choices[0].text)\r\n  \r\n        titleFinished =  '[' + response.choices[0].finish_reason + '] = ' + response.choices[0].text\r\n        adTitleText.value.innerText = titleFinished\r\n        console.log('....');\r\n        setTimeout(function(){\r\n        console.log('timeout');\r\n        },10000);\r\n        \r\n      });\r\n      console.log(response)\r\n    } catch (error) {\r\n      if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something else happened during the request that triggered an error\r\n          console.log('Error', error.message);\r\n        }\r\n\r\n    }\r\n  };\r\n\r\n  \r\n  // Fetch Image Prompt and URL\r\n  const fetchImagePrompt = async (title,userInput) => {\r\n    try {\r\n      //synopsis: ${synopsis}\r\n      // API Call to OpenAI for Image Prompt\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Give a short description of an image that can be used to advertise a product or service based on title provided. The description should be rich in visual detail and but should not exceed more than 20 words.\r\n        ###\r\n        title: ${title}\r\n        userInput: ${userInput}\r\n        image description: \r\n        `,\r\n        temperature: 0.8,\r\n        max_tokens: 50,\r\n      }).then(response => {\r\n        console.log('IMAGE DESCRIPTION Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim())\r\n        console.log('.....');\r\n        setTimeout(function(){\r\n        console.log('timeout end');\r\n        },10000);        \r\n        fetchImageUrl(response.choices[0].text.trim())\r\n      });\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something else happened during the request that triggered an error\r\n          console.log('Error', error.message);\r\n        }\r\n\r\n    }\r\n  };\r\n\r\n\r\n  // Fetch Image URL\r\n  const fetchImageUrl = async (imagePrompt) => {\r\n    try {\r\n   \r\n    console.log(imagePrompt);\r\n    alert(\"IMAGE DESCRIPTION= \"+imagePrompt)\r\n\r\n    // API Call to OpenAI for Image URL\r\n    const response = await openai.images.generate({\r\n        prompt: `${imagePrompt}. There should be no text in this image.`,\r\n        n: 1,\r\n        size: '256x256',\r\n        //response_format: 'b64_json',\r\n      }).then(response => {\r\n        console.log('Image URL = response.data', response.data)\r\n        console.log('Generated Image URL: ',response.data[0].url)\r\n        adURLText.value.innerText = response.data[0].url\r\n        //imageUrl.value = `data:image/png;base64,${response.data[0].b64_json}`;\r\n        console.log('....');\r\n        setTimeout(function(){\r\n        console.log('timeout end');\r\n        },10000);\r\n      });\r\n\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n\r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something else happened during the request that triggered an error\r\n          console.log('Error', error.message);\r\n        }\r\n    }\r\n  };\r\n\r\n  /*\r\n  // Switch to Output View\r\n  const viewPitch = () => {\r\n    document.getElementById('setup-container').style.display = 'none';\r\n    document.getElementById('output-container').style.display = 'flex';\r\n    movieBossText.value.innerText = `This idea is so good. Remember, I want 10% 💰`;\r\n  };\r\n  */\r\n</script>\r\n\r\n<style scoped>\r\n\r\nsection {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: var(--light);\r\n  border-radius: var(--border-rad-lg);\r\n  padding: 16px;\r\n  box-shadow: 0px 1px 18px 3px var(--dark);\r\n  max-width: 1000px;\r\n  width: calc(100% - 32px);\r\n  z-index: 1000;\r\n}\r\n\r\n/* Setup */\r\n\r\n.setup-inner {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 24px 8px;\r\n  min-height: 234px;\r\n}\r\n\r\n.setup-inner>img {\r\n  width: 50%;\r\n  filter: drop-shadow(3px 2px 3px var(--medium-dark));\r\n  align-self: center;\r\n}\r\n\r\n.setup-input-container {\r\n  min-height: 74px;\r\n}\r\n\r\n.speech-bubble-ai {\r\n  max-width: 55%;\r\n  min-height: 124px;\r\n  border-radius: var(--border-rad-lg);\r\n  position: relative;\r\n  margin: 0;\r\n  border: 3px solid var(--medium-dark);\r\n  background-color: var(--white);\r\n  align-self: flex-start;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.speech-bubble-ai:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-left: 9px solid transparent;\r\n  border-right: 9px solid var(--medium-dark);\r\n  border-top: 9px solid var(--medium-dark);\r\n  border-bottom: 9px solid transparent;\r\n  left: -21px;\r\n  top: 64px;\r\n}\r\n\r\n.speech-bubble-ai:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-left: 7px solid transparent;\r\n  border-right: 7px solid var(--white);\r\n  border-top: 7px solid var(--white);\r\n  border-bottom: 7px solid transparent;\r\n  left: -11px;\r\n  top: 68px;\r\n}\r\n\r\n.speech-bubble-ai>p {\r\n  padding: 0 1.3em;\r\n  color: var(--dark);\r\n  font-size: 14px;\r\n}\r\n\r\ntextarea {\r\n  background-color: var(--light-grey);\r\n  padding: 8px;\r\n  border: none;\r\n  border-top-right-radius: 0;\r\n  border-top-left-radius: var(--border-rad-lg);\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: var(--border-rad-lg);\r\n  width: 100%;\r\n  resize: none;\r\n  min-height: 40px;\r\n  box-sizing: border-box;\r\n  font-family: 'Poppins', sans-serif;\r\n}\r\n\r\ntextarea::placeholder {\r\n  color: var(--medium-dark);\r\n  font-size: 14px;\r\n  opacity: 0.8;\r\n}\r\n\r\n/* Larger mobiles+ */\r\n@media(min-width: 380px) {\r\n  .setup-input-container {\r\n    padding-top: 0;\r\n  }\r\n\r\n  .speech-bubble-ai:before {\r\n    top: 92px;\r\n  }\r\n\r\n  .speech-bubble-ai:after {\r\n    top: 96px;\r\n  }\r\n\r\n  .speech-bubble-ai>p {\r\n    font-size: 16px;\r\n  }\r\n\r\n  textarea::placeholder {\r\n    font-size: 16px;\r\n    opacity: 0.8;\r\n  }\r\n}\r\n\r\n/* Buttons & SVG */\r\nbutton {\r\n  border: none;\r\n  background: var(--pink);\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: var(--dark);\r\n}\r\n\r\n.send-btn {\r\n  border-top-right-radius: var(--border-rad-lg);\r\n  border-bottom-right-radius: var(--border-rad-lg);\r\n  min-width: 50px;\r\n}\r\n\r\n.send-btn>img {\r\n  width: 1.6em;\r\n  vertical-align: middle;\r\n}\r\n\r\n.view-pitch-btn {\r\n  color: var(--light);\r\n  border-radius: var(--border-rad-lg);\r\n  padding: 16px;\r\n  margin: 4px auto;\r\n  display: block;\r\n  font-size: 18px;\r\n}\r\n\r\n.view-pitch-btn:hover {\r\n  box-shadow: 1px 1px 5px 1px var(--medium-dark);\r\n}\r\n\r\nimg.loading {\r\n  max-width: 50px;\r\n  filter: none;\r\n}\r\n\r\n/* Output */\r\n.output-container {\r\n  display: none;\r\n  flex-direction: column;\r\n  margin: 16px auto;\r\n  color: var(--dark);\r\n  padding: 16px;\r\n}\r\n\r\n.output-img-container>img {\r\n  width: 90%;\r\n  border-radius: var(--border-rad-lg);\r\n  box-shadow: 2px 2px 6px 2px var(--dark);\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}