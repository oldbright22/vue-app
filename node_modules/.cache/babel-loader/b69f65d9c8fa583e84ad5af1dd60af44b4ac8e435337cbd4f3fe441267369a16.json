{"ast":null,"code":"import { ref } from 'vue';\n//NEW (i.e., OpenAI NodeJS SDK v4)\nimport OpenAI from 'openai';\nconst key = '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';\n\n//const dotenv = require('dotenv');\n//dotenv.config(); \n//process.env.OPENAI_API_KEY \n\nexport default {\n  __name: 'MoviePitch',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const openai = new OpenAI({\n      apiKey: key,\n      // This is also the default, can be omitted\n      dangerouslyAllowBrowser: true //Enable this due we do not have a client/server architecture\n    });\n\n    // Reactive Variables\n    //const imageUrl = ref(\"\");\n    const userInput = ref(\"\");\n    const outputtitle = ref(null);\n    const outputstars = ref(null);\n    const outputtext = ref(null);\n    const setupInputContainer = ref(null);\n    const movieBossText = ref(null);\n\n    // Show Loading Indicator\n    const showLoadingIndicator = () => {\n      setupInputContainer.value.innerHTML = `<img src=\"../assets/loading.svg\" class=\"loading\" id=\"loading\">`;\n      movieBossText.value.innerText = `Ok, just wait a second while my digital brain digests that...`;\n    };\n\n    // Submit User Input\n    const submitSetup = () => {\n      if (userInput.value) {\n        showLoadingIndicator();\n        fetchBotReply(userInput.value);\n        fetchSynopsis(userInput.value); //fetch title called inside Synopsis\n        fetchImagePrompt(fetchTitle, fetchSynopsis);\n      }\n    };\n\n    // FetchBot Reply\n    const fetchBotReply = async outline => {\n      try {\n        //alert(\"FetchBot Reply - Outline: \" + outline);\n        //alert(openai.apiKey);    \n\n        //API Call to OpenAI for Bot Reply\n        const response = await openai.completions.create({\n          model: 'gpt-3.5-turbo-instruct',\n          prompt: `Generate a short message that talks enthusiastically about outline and sounds interesting.\n        ###\n        outline: ${outline}\n        message: \n        `,\n          temperature: 0.8,\n          max_tokens: 60\n        }).then(response => {\n          console.log(response.choices[0].text.trim());\n          console.log(response.choices[0].finish_reason);\n          console.log(response.choices);\n          movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\n          console.log('before');\n          setTimeout(function () {\n            console.log('after');\n          }, 5000);\n        });\n        console.log(response);\n      } catch (error) {\n        console.error('[FetchBot Reply] ERROR:', error);\n        // Handle errors as needed\n      }\n    };\n\n    // Fetch Synopsis\n    const fetchSynopsis = async outline => {\n      try {\n        //alert(\"Fetch Synopsis - Outline: \" + outline);\n\n        var synopsis = \" \";\n        // API Call to OpenAI for Synopsis\n        const response = await openai.completions.create({\n          model: 'gpt-3.5-turbo-instruct',\n          prompt: `Generate an engaging, professional and marketable movie synopsis based on an outline. \n        The synopsis should include actors names in brackets after each character. \n        Choose actors that would be ideal for this role. \n        ###\n        outline: ${outline}\n        synopsis: \n        `,\n          max_tokens: 700\n        }).then(response => {\n          console.log(response.choices[0].text.trim());\n          console.log(response.choices[0].finish_reason);\n          console.log(response.choices);\n          //movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\n          console.log('before');\n          setTimeout(function () {\n            console.log('after');\n          }, 100000);\n          synopsis = response.choices[0].text.trim();\n        });\n\n        //alert(\"Fetch Synopsis - End\")\n        console.log(response);\n        await fetchTitle(synopsis);\n        await fetchStars(synopsis);\n      } catch (error) {\n        console.error('[Fetch Synopsis] ERROR:', error);\n        // Handle errors as needed\n      }\n    };\n\n    // Fetch Movie Title\n    const fetchTitle = async synopsis => {\n      try {\n        // API Call to OpenAI for Movie Title\n        const response = await openai.completions.create({\n          model: 'gpt-3.5-turbo-instruct',\n          prompt: `Generate a catchy movie title for this synopsis: ${synopsis}`,\n          max_tokens: 25,\n          temperature: 0.7\n        }).then(response => {\n          console.log(response.choices[0].text.trim());\n          console.log(response.choices[0].finish_reason);\n          console.log(response.choices);\n          movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\n          console.log('before');\n          setTimeout(function () {\n            console.log('after');\n          }, 100000);\n        });\n        console.log(response);\n      } catch (error) {\n        console.error('[Fetch Title] ERROR:', error);\n        // Handle errors as needed\n      }\n    };\n\n    // Fetch Cast Stars\n    const fetchStars = async synopsis => {\n      try {\n        // API Call to OpenAI for Cast Stars\n        const response = await openai.completions.create({\n          model: 'gpt-3.5-turbo-instruct',\n          prompt: `Extract the names in brackets from the synopsis.\n        ###\n        synopsis: ${synopsis}\n        names:   \n        `,\n          max_tokens: 30\n        }).then(response => {\n          console.log(response.choices[0].text.trim());\n          console.log(response.choices[0].finish_reason);\n          console.log(response.choices);\n          //movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\n          console.log('before');\n          setTimeout(function () {\n            console.log('after');\n          }, 5000);\n        });\n        console.log(response);\n      } catch (error) {\n        console.error('[Fetch Stars] ERROR :', error);\n        // Handle errors as needed\n      }\n    };\n\n    // Fetch Image Prompt and URL\n    const fetchImagePrompt = async (title, synopsis) => {\n      try {\n        // API Call to OpenAI for Image Prompt\n        const response = await openai.completions.create({\n          model: 'gpt-3.5-turbo-instruct',\n          prompt: `Give a short description of an image which could be used to advertise a movie based on a title and synopsis. The description should be rich in visual detail but contain no names.\n        ###\n        title: ${title}\n        synopsis: ${synopsis}\n        image description: \n        `,\n          temperature: 0.8,\n          max_tokens: 100\n        }).then(response => {\n          console.log(response.choices[0].text.trim());\n          console.log(response.choices[0].finish_reason);\n          console.log(response.choices);\n          console.log('Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim());\n          //alert(\"PRIOR to fetch ImageURL\")\n          fetchImageUrl(response.choices[0].text.trim());\n        });\n        console.log(response);\n      } catch (error) {\n        console.error('[Fetch ImagePrompt] ERROR', error);\n        // Handle errors as needed\n      }\n    };\n    function downloadImage(url, filepath) {\n      console.log(filepath);\n      // Create an <a> element\n      const element = document.createElement('a');\n      // Set the href to the image URL\n      element.href = url;\n      // Use the 'download' attribute to define the filename\n      element.download = 'generatedImage.jpg' || 'download';\n      // Append the <a> element to the document body temporarily\n      document.body.appendChild(element);\n      // Trigger the download by simulating a click\n      element.click();\n      // Clean up and remove the <a> element from the document\n      document.body.removeChild(element);\n    }\n    /*\r\n    // Function to download an image from a URL and save it to a file\r\n    function downloadImage(url, filePath) {\r\n      return new Promise((resolve, reject) => {\r\n        https.get(url, (res) => {\r\n          const stream = fs.createWriteStream(filePath);\r\n          res.pipe(stream);\r\n          stream.on(\"finish\", () => {\r\n            stream.close();\r\n            resolve(filePath);\r\n          });\r\n        }).on(\"error\", (err) => {\r\n          reject(err);\r\n        });\r\n      });\r\n    }\r\n    */\n\n    // Fetch Image URL\n    const fetchImageUrl = async imagePrompt => {\n      try {\n        console.log(imagePrompt);\n        //alert(openai.apiKey);\n\n        var generatedURL = \"\";\n        // API Call to OpenAI for Image URL\n        const response = await openai.images.generate({\n          prompt: `image of a sun in a sunset.`,\n          n: 1,\n          size: '256x256'\n          //response_format: 'b64_json',\n        }).then(response => {\n          console.log('RESPONSE imageURL', response.data);\n          console.log('Generated Image URL: ', response.data[0].url);\n          movieBossText.value.innerText = response.data[0].url;\n          generatedURL = response.data[0].url;\n          //imageUrl.value = `data:image/png;base64,${response.data[0].b64_json}`;\n          console.log('before');\n          setTimeout(function () {\n            console.log('after');\n          }, 10000);\n        });\n\n        //Specify a path to save the downloaded image\n        const imagePath = \"../assets/generatedImage.jpg\";\n\n        // Download and save the image\n        await downloadImage(generatedURL, imagePath);\n        console.log(response);\n      } catch (error) {\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        } else if (error.request) {\n          // The request was made but no response was received\n          console.log(error.request);\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log('Error', error.message);\n        }\n        console.log('[Fetch ImageURL] ERROR:', error.message);\n        // Handle errors as needed\n      }\n    };\n\n    // Switch to Output View\n    const viewPitch = () => {\n      document.getElementById('setup-container').style.display = 'none';\n      document.getElementById('output-container').style.display = 'flex';\n      movieBossText.value.innerText = `This idea is so good. Remember, I want 10% 💰`;\n    };\n    const __returned__ = {\n      key,\n      openai,\n      userInput,\n      outputtitle,\n      outputstars,\n      outputtext,\n      setupInputContainer,\n      movieBossText,\n      showLoadingIndicator,\n      submitSetup,\n      fetchBotReply,\n      fetchSynopsis,\n      fetchTitle,\n      fetchStars,\n      fetchImagePrompt,\n      downloadImage,\n      fetchImageUrl,\n      viewPitch,\n      ref,\n      get OpenAI() {\n        return OpenAI;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","OpenAI","key","openai","apiKey","dangerouslyAllowBrowser","userInput","outputtitle","outputstars","outputtext","setupInputContainer","movieBossText","showLoadingIndicator","value","innerHTML","innerText","submitSetup","fetchBotReply","fetchSynopsis","fetchImagePrompt","fetchTitle","outline","response","completions","create","model","prompt","temperature","max_tokens","then","console","log","choices","text","trim","finish_reason","setTimeout","error","synopsis","fetchStars","title","fetchImageUrl","downloadImage","url","filepath","element","document","createElement","href","download","body","appendChild","click","removeChild","imagePrompt","generatedURL","images","generate","n","size","data","imagePath","status","headers","request","message","viewPitch","getElementById","style","display"],"sources":["C:/Users/btina/LLM/vue-app/src/components/MoviePitch.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <section id=\"setup-container\">\r\n      <div class=\"setup-inner\">\r\n        <img src=\"../assets/movieboss.png\" alt=\"MovieBoss\">\r\n        <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n          <p ref=\"movieBossText\">\r\n            Give me a one-sentence concept, and I'll give you a title and Advertising URL poster...!\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"setup-inner setup-input-container\" ref=\"setupInputContainer\">\r\n        <textarea v-model=\"userInput\" id=\"setup-textarea\" placeholder=\"Excited to learn, ask me anything you want.\"></textarea>\r\n        <button @click=\"submitSetup\" class=\"send-btn\" id=\"send-btn\" aria-label=\"send\">\r\n          <img src=\"../assets/send-btn-icon.png\" alt=\"send\">\r\n        </button>\r\n      </div>\r\n    </section>\r\n    <section class=\"output-container\" id=\"output-container\">  \r\n      <!--\r\n      <div id=\"output-img-container\" class=\"output-img-container\">\r\n            <img :src=\"imageUrl\" alt=\"Movie Poster\">\r\n       </div>         \r\n       <h1 id=\"output-title\" ref=\"outputtitle\">{{ outputtitle }}</h1>\r\n       <h2 id=\"output-stars\" ref=\"outputstars\">{{ outputstars }}</h2>\r\n       <p id=\"output-text\" ref=\"outputtext\">{{ outputtext }}</p>\r\n      -->\r\n      <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n          <p ref=\"outputtitle\">\r\n            Ad title\r\n          </p>\r\n      </div>\r\n      <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n          <p ref=\"outputstars\">\r\n            Ad stars\r\n          </p>\r\n      </div>\r\n      <div class=\"speech-bubble-ai\" ref=\"speechBubble\">\r\n          <p ref=\"outputtext\">\r\n            Ad text\r\n          </p>\r\n      </div>\r\n      <button class=\"view-pitch-btn\" @click=\"viewPitch\" aria-label=\"View Pitch\">\r\n        View Pitch\r\n      </button>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n  import { ref } from 'vue';\r\n  //NEW (i.e., OpenAI NodeJS SDK v4)\r\n  import OpenAI from 'openai';\r\n  \r\n  const key='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'\r\n\r\n  //const dotenv = require('dotenv');\r\n  //dotenv.config(); \r\n  //process.env.OPENAI_API_KEY \r\n\r\n\r\n  const openai = new OpenAI({\r\n  apiKey: key, // This is also the default, can be omitted\r\n  dangerouslyAllowBrowser: true  //Enable this due we do not have a client/server architecture\r\n  }); \r\n\r\n  // Reactive Variables\r\n  //const imageUrl = ref(\"\");\r\n  const userInput = ref(\"\");\r\n  const outputtitle = ref(null);\r\n  const outputstars = ref(null);\r\n  const outputtext = ref(null);\r\n  const setupInputContainer = ref(null);\r\n  const movieBossText = ref(null);\r\n  \r\n  // Show Loading Indicator\r\n  const showLoadingIndicator = () => {\r\n    setupInputContainer.value.innerHTML = `<img src=\"../assets/loading.svg\" class=\"loading\" id=\"loading\">`;\r\n    movieBossText.value.innerText = `Ok, just wait a second while my digital brain digests that...`;\r\n  };\r\n\r\n  // Submit User Input\r\n  const submitSetup = () => {\r\n    if (userInput.value) {\r\n      showLoadingIndicator();\r\n      fetchBotReply(userInput.value);\r\n      fetchSynopsis(userInput.value); //fetch title called inside Synopsis\r\n      fetchImagePrompt(fetchTitle,fetchSynopsis);\r\n    }\r\n  };\r\n\r\n  // FetchBot Reply\r\n  const fetchBotReply = async (outline) => {\r\n    try {      \r\n      //alert(\"FetchBot Reply - Outline: \" + outline);\r\n      //alert(openai.apiKey);    \r\n\r\n      //API Call to OpenAI for Bot Reply\r\n      const response = await openai.completions.create({\r\n      model: 'gpt-3.5-turbo-instruct', \r\n      prompt: `Generate a short message that talks enthusiastically about outline and sounds interesting.\r\n        ###\r\n        outline: ${outline}\r\n        message: \r\n        `,\r\n      temperature: 0.8,\r\n      max_tokens: 60\r\n      }).then(response => {\r\n        console.log(response.choices[0].text.trim())\r\n        console.log(response.choices[0].finish_reason)\r\n        console.log(response.choices)\r\n        movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim()\r\n        console.log('before');\r\n        setTimeout(function(){\r\n        console.log('after');\r\n        },5000);\r\n      });\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      console.error('[FetchBot Reply] ERROR:', error);\r\n      // Handle errors as needed\r\n    } \r\n  };\r\n\r\n\r\n  // Fetch Synopsis\r\n  const fetchSynopsis = async (outline) => {\r\n    try {\r\n      //alert(\"Fetch Synopsis - Outline: \" + outline);\r\n\r\n      var synopsis = \" \";\r\n      // API Call to OpenAI for Synopsis\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Generate an engaging, professional and marketable movie synopsis based on an outline. \r\n        The synopsis should include actors names in brackets after each character. \r\n        Choose actors that would be ideal for this role. \r\n        ###\r\n        outline: ${outline}\r\n        synopsis: \r\n        `,\r\n        max_tokens: 700,\r\n      }).then(response => {\r\n        console.log(response.choices[0].text.trim())\r\n        console.log(response.choices[0].finish_reason)\r\n        console.log(response.choices)\r\n        //movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\r\n        console.log('before');\r\n        setTimeout(function(){\r\n        console.log('after');\r\n        },100000);\r\n        synopsis = response.choices[0].text.trim();\r\n      });\r\n\r\n      //alert(\"Fetch Synopsis - End\")\r\n      console.log(response)\r\n\r\n      await fetchTitle(synopsis);\r\n      await fetchStars(synopsis);\r\n\r\n    } catch (error) {\r\n      console.error('[Fetch Synopsis] ERROR:', error);\r\n      // Handle errors as needed\r\n    } \r\n  };\r\n  \r\n  // Fetch Movie Title\r\n  const fetchTitle = async (synopsis) => {\r\n    try {\r\n     \r\n      // API Call to OpenAI for Movie Title\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Generate a catchy movie title for this synopsis: ${synopsis}`,\r\n        max_tokens: 25,\r\n        temperature: 0.7,\r\n      }).then(response => {\r\n        console.log(response.choices[0].text.trim())\r\n        console.log(response.choices[0].finish_reason)\r\n        console.log(response.choices)\r\n        movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim()\r\n        console.log('before');\r\n        setTimeout(function(){\r\n        console.log('after');\r\n        },100000);\r\n        \r\n      });\r\n      console.log(response)\r\n    } catch (error) {\r\n      console.error('[Fetch Title] ERROR:', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  // Fetch Cast Stars\r\n  const fetchStars = async (synopsis) => {\r\n    try {\r\n      \r\n      // API Call to OpenAI for Cast Stars\r\n      const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Extract the names in brackets from the synopsis.\r\n        ###\r\n        synopsis: ${synopsis}\r\n        names:   \r\n        `,\r\n        max_tokens: 30,\r\n      }).then(response => {\r\n        console.log(response.choices[0].text.trim())\r\n        console.log(response.choices[0].finish_reason)\r\n        console.log(response.choices)\r\n        //movieBossText.value.innerText = 'Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim();\r\n        console.log('before');\r\n\r\n        setTimeout(function(){\r\n        console.log('after');\r\n        },5000);\r\n      });\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      console.error('[Fetch Stars] ERROR :', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  // Fetch Image Prompt and URL\r\n  const fetchImagePrompt = async (title, synopsis) => {\r\n    try {\r\n      // API Call to OpenAI for Image Prompt\r\n        const response = await openai.completions.create({\r\n        model: 'gpt-3.5-turbo-instruct',\r\n        prompt: `Give a short description of an image which could be used to advertise a movie based on a title and synopsis. The description should be rich in visual detail but contain no names.\r\n        ###\r\n        title: ${title}\r\n        synopsis: ${synopsis}\r\n        image description: \r\n        `,\r\n        temperature: 0.8,\r\n        max_tokens: 100,\r\n      }).then(response => {\r\n        console.log(response.choices[0].text.trim())\r\n        console.log(response.choices[0].finish_reason)\r\n        console.log(response.choices)\r\n        console.log('Finish[' + response.choices[0].finish_reason + '] ' + response.choices[0].text.trim())\r\n        //alert(\"PRIOR to fetch ImageURL\")\r\n        fetchImageUrl(response.choices[0].text.trim())\r\n      });\r\n      console.log(response)\r\n      \r\n    } catch (error) {\r\n      console.error('[Fetch ImagePrompt] ERROR', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n\r\n  function downloadImage(url, filepath) {\r\n    console.log(filepath);\r\n    // Create an <a> element\r\n    const element = document.createElement('a');\r\n    // Set the href to the image URL\r\n    element.href = url;\r\n    // Use the 'download' attribute to define the filename\r\n    element.download = 'generatedImage.jpg' || 'download';\r\n    // Append the <a> element to the document body temporarily\r\n    document.body.appendChild(element);\r\n    // Trigger the download by simulating a click\r\n    element.click();\r\n    // Clean up and remove the <a> element from the document\r\n    document.body.removeChild(element);\r\n}  \r\n/*\r\n// Function to download an image from a URL and save it to a file\r\nfunction downloadImage(url, filePath) {\r\n  return new Promise((resolve, reject) => {\r\n    https.get(url, (res) => {\r\n      const stream = fs.createWriteStream(filePath);\r\n      res.pipe(stream);\r\n      stream.on(\"finish\", () => {\r\n        stream.close();\r\n        resolve(filePath);\r\n      });\r\n    }).on(\"error\", (err) => {\r\n      reject(err);\r\n    });\r\n  });\r\n}\r\n*/\r\n\r\n  // Fetch Image URL\r\n  const fetchImageUrl = async (imagePrompt) => {\r\n    try {\r\n\r\n    console.log(imagePrompt);\r\n    //alert(openai.apiKey);\r\n\r\n    \r\n    var generatedURL =\"\"\r\n    // API Call to OpenAI for Image URL\r\n    const response = await openai.images.generate({\r\n        prompt: `image of a sun in a sunset.`,\r\n        n: 1,\r\n        size: '256x256',\r\n        //response_format: 'b64_json',\r\n      }).then(response => {\r\n        console.log('RESPONSE imageURL', response.data)\r\n        console.log('Generated Image URL: ',response.data[0].url)\r\n        movieBossText.value.innerText = response.data[0].url\r\n        generatedURL = response.data[0].url \r\n      //imageUrl.value = `data:image/png;base64,${response.data[0].b64_json}`;\r\n        console.log('before');\r\n        setTimeout(function(){\r\n        console.log('after');\r\n        },10000);\r\n      });\r\n\r\n      //Specify a path to save the downloaded image\r\n      const imagePath = \"../assets/generatedImage.jpg\";\r\n\r\n      // Download and save the image\r\n      await downloadImage(generatedURL, imagePath);\r\n      console.log(response)\r\n\r\n    } catch (error) {\r\n      if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      console.log(error.response.headers);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.log(error.request);\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.log('Error', error.message);\r\n    }\r\n\r\n      console.log('[Fetch ImageURL] ERROR:', error.message);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  // Switch to Output View\r\n  const viewPitch = () => {\r\n    document.getElementById('setup-container').style.display = 'none';\r\n    document.getElementById('output-container').style.display = 'flex';\r\n    movieBossText.value.innerText = `This idea is so good. Remember, I want 10% 💰`;\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n\r\nsection {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: var(--light);\r\n  border-radius: var(--border-rad-lg);\r\n  padding: 16px;\r\n  box-shadow: 0px 1px 18px 3px var(--dark);\r\n  max-width: 500px;\r\n  width: calc(100% - 32px);\r\n  z-index: 1000;\r\n}\r\n\r\n/* Setup */\r\n\r\n.setup-inner {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  padding: 24px 8px;\r\n  min-height: 234px;\r\n}\r\n\r\n.setup-inner>img {\r\n  width: 50%;\r\n  filter: drop-shadow(3px 2px 3px var(--medium-dark));\r\n  align-self: center;\r\n}\r\n\r\n.setup-input-container {\r\n  min-height: 74px;\r\n}\r\n\r\n.speech-bubble-ai {\r\n  max-width: 55%;\r\n  min-height: 124px;\r\n  border-radius: var(--border-rad-lg);\r\n  position: relative;\r\n  margin: 0;\r\n  border: 3px solid var(--medium-dark);\r\n  background-color: var(--white);\r\n  align-self: flex-start;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.speech-bubble-ai:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-left: 9px solid transparent;\r\n  border-right: 9px solid var(--medium-dark);\r\n  border-top: 9px solid var(--medium-dark);\r\n  border-bottom: 9px solid transparent;\r\n  left: -21px;\r\n  top: 64px;\r\n}\r\n\r\n.speech-bubble-ai:after {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-left: 7px solid transparent;\r\n  border-right: 7px solid var(--white);\r\n  border-top: 7px solid var(--white);\r\n  border-bottom: 7px solid transparent;\r\n  left: -11px;\r\n  top: 68px;\r\n}\r\n\r\n.speech-bubble-ai>p {\r\n  padding: 0 1.3em;\r\n  color: var(--dark);\r\n  font-size: 14px;\r\n}\r\n\r\ntextarea {\r\n  background-color: var(--light-grey);\r\n  padding: 8px;\r\n  border: none;\r\n  border-top-right-radius: 0;\r\n  border-top-left-radius: var(--border-rad-lg);\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: var(--border-rad-lg);\r\n  width: 100%;\r\n  resize: none;\r\n  min-height: 40px;\r\n  box-sizing: border-box;\r\n  font-family: 'Poppins', sans-serif;\r\n}\r\n\r\ntextarea::placeholder {\r\n  color: var(--medium-dark);\r\n  font-size: 14px;\r\n  opacity: 0.8;\r\n}\r\n\r\n/* Larger mobiles+ */\r\n@media(min-width: 380px) {\r\n  .setup-input-container {\r\n    padding-top: 0;\r\n  }\r\n\r\n  .speech-bubble-ai:before {\r\n    top: 92px;\r\n  }\r\n\r\n  .speech-bubble-ai:after {\r\n    top: 96px;\r\n  }\r\n\r\n  .speech-bubble-ai>p {\r\n    font-size: 16px;\r\n  }\r\n\r\n  textarea::placeholder {\r\n    font-size: 16px;\r\n    opacity: 0.8;\r\n  }\r\n}\r\n\r\n/* Buttons & SVG */\r\nbutton {\r\n  border: none;\r\n  background: var(--pink);\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: var(--dark);\r\n}\r\n\r\n.send-btn {\r\n  border-top-right-radius: var(--border-rad-lg);\r\n  border-bottom-right-radius: var(--border-rad-lg);\r\n  min-width: 50px;\r\n}\r\n\r\n.send-btn>img {\r\n  width: 1.6em;\r\n  vertical-align: middle;\r\n}\r\n\r\n.view-pitch-btn {\r\n  color: var(--light);\r\n  border-radius: var(--border-rad-lg);\r\n  padding: 16px;\r\n  margin: 4px auto;\r\n  display: block;\r\n  font-size: 18px;\r\n}\r\n\r\n.view-pitch-btn:hover {\r\n  box-shadow: 1px 1px 5px 1px var(--medium-dark);\r\n}\r\n\r\nimg.loading {\r\n  max-width: 50px;\r\n  filter: none;\r\n}\r\n\r\n/* Output */\r\n.output-container {\r\n  display: none;\r\n  flex-direction: column;\r\n  margin: 16px auto;\r\n  color: var(--dark);\r\n  padding: 16px;\r\n}\r\n\r\n.output-img-container>img {\r\n  width: 90%;\r\n  border-radius: var(--border-rad-lg);\r\n  box-shadow: 2px 2px 6px 2px var(--dark);\r\n}\r\n\r\n</style>"],"mappings":"AAkDE,SAASA,GAAG,QAAQ,KAAK;AACzB;AACA,OAAOC,MAAM,MAAM,QAAQ;AAE3B,MAAMC,GAAG,GAAC,qDAAqD;;AAE/D;AACA;AACA;;;;;;;;IAGA,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAAC;MAC1BG,MAAM,EAAEF,GAAG;MAAE;MACbG,uBAAuB,EAAE,IAAI,CAAE;IAC/B,CAAC,CAAC;;IAEF;IACA;IACA,MAAMC,SAAS,GAAGN,GAAG,CAAC,EAAE,CAAC;IACzB,MAAMO,WAAW,GAAGP,GAAG,CAAC,IAAI,CAAC;IAC7B,MAAMQ,WAAW,GAAGR,GAAG,CAAC,IAAI,CAAC;IAC7B,MAAMS,UAAU,GAAGT,GAAG,CAAC,IAAI,CAAC;IAC5B,MAAMU,mBAAmB,GAAGV,GAAG,CAAC,IAAI,CAAC;IACrC,MAAMW,aAAa,GAAGX,GAAG,CAAC,IAAI,CAAC;;IAE/B;IACA,MAAMY,oBAAoB,GAAGA,CAAA,KAAM;MACjCF,mBAAmB,CAACG,KAAK,CAACC,SAAS,GAAI,gEAA+D;MACtGH,aAAa,CAACE,KAAK,CAACE,SAAS,GAAI,+DAA8D;IACjG,CAAC;;IAED;IACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxB,IAAIV,SAAS,CAACO,KAAK,EAAE;QACnBD,oBAAoB,CAAC,CAAC;QACtBK,aAAa,CAACX,SAAS,CAACO,KAAK,CAAC;QAC9BK,aAAa,CAACZ,SAAS,CAACO,KAAK,CAAC,CAAC,CAAC;QAChCM,gBAAgB,CAACC,UAAU,EAACF,aAAa,CAAC;MAC5C;IACF,CAAC;;IAED;IACA,MAAMD,aAAa,GAAG,MAAOI,OAAO,IAAK;MACvC,IAAI;QACF;QACA;;QAEA;QACA,MAAMC,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,WAAW,CAACC,MAAM,CAAC;UACjDC,KAAK,EAAE,wBAAwB;UAC/BC,MAAM,EAAG;AACf;AACA,mBAAmBL,OAAQ;AAC3B;AACA,SAAS;UACHM,WAAW,EAAE,GAAG;UAChBC,UAAU,EAAE;QACZ,CAAC,CAAC,CAACC,IAAI,CAACP,QAAQ,IAAI;UAClBQ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;UAC5CJ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACG,aAAa,CAAC;UAC9CL,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC;UAC7BrB,aAAa,CAACE,KAAK,CAACE,SAAS,GAAG,SAAS,GAAGO,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACG,aAAa,GAAG,IAAI,GAAGb,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC;UACtHJ,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;UACrBK,UAAU,CAAC,YAAU;YACrBN,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;UACpB,CAAC,EAAC,IAAI,CAAC;QACT,CAAC,CAAC;QACFD,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;MAEvB,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;MACF;IACF,CAAC;;IAGD;IACA,MAAMnB,aAAa,GAAG,MAAOG,OAAO,IAAK;MACvC,IAAI;QACF;;QAEA,IAAIiB,QAAQ,GAAG,GAAG;QAClB;QACA,MAAMhB,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,WAAW,CAACC,MAAM,CAAC;UAC/CC,KAAK,EAAE,wBAAwB;UAC/BC,MAAM,EAAG;AACjB;AACA;AACA;AACA,mBAAmBL,OAAQ;AAC3B;AACA,SAAS;UACDO,UAAU,EAAE;QACd,CAAC,CAAC,CAACC,IAAI,CAACP,QAAQ,IAAI;UAClBQ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;UAC5CJ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACG,aAAa,CAAC;UAC9CL,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC;UAC7B;UACAF,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;UACrBK,UAAU,CAAC,YAAU;YACrBN,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;UACpB,CAAC,EAAC,MAAM,CAAC;UACTO,QAAQ,GAAGhB,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC;;QAEF;QACAJ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;QAErB,MAAMF,UAAU,CAACkB,QAAQ,CAAC;QAC1B,MAAMC,UAAU,CAACD,QAAQ,CAAC;MAE5B,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C;MACF;IACF,CAAC;;IAED;IACA,MAAMjB,UAAU,GAAG,MAAOkB,QAAQ,IAAK;MACrC,IAAI;QAEF;QACA,MAAMhB,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,WAAW,CAACC,MAAM,CAAC;UAC/CC,KAAK,EAAE,wBAAwB;UAC/BC,MAAM,EAAG,oDAAmDY,QAAS,EAAC;UACtEV,UAAU,EAAE,EAAE;UACdD,WAAW,EAAE;QACf,CAAC,CAAC,CAACE,IAAI,CAACP,QAAQ,IAAI;UAClBQ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;UAC5CJ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACG,aAAa,CAAC;UAC9CL,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC;UAC7BrB,aAAa,CAACE,KAAK,CAACE,SAAS,GAAG,SAAS,GAAGO,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACG,aAAa,GAAG,IAAI,GAAGb,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC;UACtHJ,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;UACrBK,UAAU,CAAC,YAAU;YACrBN,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;UACpB,CAAC,EAAC,MAAM,CAAC;QAEX,CAAC,CAAC;QACFD,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;MACvB,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C;MACF;IACF,CAAC;;IAED;IACA,MAAME,UAAU,GAAG,MAAOD,QAAQ,IAAK;MACrC,IAAI;QAEF;QACA,MAAMhB,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,WAAW,CAACC,MAAM,CAAC;UAC/CC,KAAK,EAAE,wBAAwB;UAC/BC,MAAM,EAAG;AACjB;AACA,oBAAoBY,QAAS;AAC7B;AACA,SAAS;UACDV,UAAU,EAAE;QACd,CAAC,CAAC,CAACC,IAAI,CAACP,QAAQ,IAAI;UAClBQ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;UAC5CJ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACG,aAAa,CAAC;UAC9CL,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC;UAC7B;UACAF,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;UAErBK,UAAU,CAAC,YAAU;YACrBN,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;UACpB,CAAC,EAAC,IAAI,CAAC;QACT,CAAC,CAAC;QACFD,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;MAEvB,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C;MACF;IACF,CAAC;;IAED;IACA,MAAMlB,gBAAgB,GAAG,MAAAA,CAAOqB,KAAK,EAAEF,QAAQ,KAAK;MAClD,IAAI;QACF;QACE,MAAMhB,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,WAAW,CAACC,MAAM,CAAC;UACjDC,KAAK,EAAE,wBAAwB;UAC/BC,MAAM,EAAG;AACjB;AACA,iBAAiBc,KAAM;AACvB,oBAAoBF,QAAS;AAC7B;AACA,SAAS;UACDX,WAAW,EAAE,GAAG;UAChBC,UAAU,EAAE;QACd,CAAC,CAAC,CAACC,IAAI,CAACP,QAAQ,IAAI;UAClBQ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;UAC5CJ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACG,aAAa,CAAC;UAC9CL,OAAO,CAACC,GAAG,CAACT,QAAQ,CAACU,OAAO,CAAC;UAC7BF,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGT,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACG,aAAa,GAAG,IAAI,GAAGb,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;UACnG;UACAO,aAAa,CAACnB,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC;QACFJ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;MAEvB,CAAC,CAAC,OAAOe,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD;MACF;IACF,CAAC;IAGD,SAASK,aAAaA,CAACC,GAAG,EAAEC,QAAQ,EAAE;MACpCd,OAAO,CAACC,GAAG,CAACa,QAAQ,CAAC;MACrB;MACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MAC3C;MACAF,OAAO,CAACG,IAAI,GAAGL,GAAG;MAClB;MACAE,OAAO,CAACI,QAAQ,GAAG,oBAAoB,IAAI,UAAU;MACrD;MACAH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,OAAO,CAAC;MAClC;MACAA,OAAO,CAACO,KAAK,CAAC,CAAC;MACf;MACAN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,OAAO,CAAC;IACtC;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEE;IACA,MAAMJ,aAAa,GAAG,MAAOa,WAAW,IAAK;MAC3C,IAAI;QAEJxB,OAAO,CAACC,GAAG,CAACuB,WAAW,CAAC;QACxB;;QAGA,IAAIC,YAAY,GAAE,EAAE;QACpB;QACA,MAAMjC,QAAQ,GAAG,MAAMnB,MAAM,CAACqD,MAAM,CAACC,QAAQ,CAAC;UAC1C/B,MAAM,EAAG,6BAA4B;UACrCgC,CAAC,EAAE,CAAC;UACJC,IAAI,EAAE;UACN;QACF,CAAC,CAAC,CAAC9B,IAAI,CAACP,QAAQ,IAAI;UAClBQ,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAET,QAAQ,CAACsC,IAAI,CAAC;UAC/C9B,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACT,QAAQ,CAACsC,IAAI,CAAC,CAAC,CAAC,CAACjB,GAAG,CAAC;UACzDhC,aAAa,CAACE,KAAK,CAACE,SAAS,GAAGO,QAAQ,CAACsC,IAAI,CAAC,CAAC,CAAC,CAACjB,GAAG;UACpDY,YAAY,GAAGjC,QAAQ,CAACsC,IAAI,CAAC,CAAC,CAAC,CAACjB,GAAG;UACrC;UACEb,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;UACrBK,UAAU,CAAC,YAAU;YACrBN,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;UACpB,CAAC,EAAC,KAAK,CAAC;QACV,CAAC,CAAC;;QAEF;QACA,MAAM8B,SAAS,GAAG,8BAA8B;;QAEhD;QACA,MAAMnB,aAAa,CAACa,YAAY,EAAEM,SAAS,CAAC;QAC5C/B,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;MAEvB,CAAC,CAAC,OAAOe,KAAK,EAAE;QACd,IAAIA,KAAK,CAACf,QAAQ,EAAE;UACpB;UACAQ,OAAO,CAACC,GAAG,CAACM,KAAK,CAACf,QAAQ,CAACsC,IAAI,CAAC;UAChC9B,OAAO,CAACC,GAAG,CAACM,KAAK,CAACf,QAAQ,CAACwC,MAAM,CAAC;UAClChC,OAAO,CAACC,GAAG,CAACM,KAAK,CAACf,QAAQ,CAACyC,OAAO,CAAC;QACrC,CAAC,MAAM,IAAI1B,KAAK,CAAC2B,OAAO,EAAE;UACxB;UACAlC,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC2B,OAAO,CAAC;QAC5B,CAAC,MAAM;UACL;UACAlC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEM,KAAK,CAAC4B,OAAO,CAAC;QACrC;QAEEnC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEM,KAAK,CAAC4B,OAAO,CAAC;QACrD;MACF;IACF,CAAC;;IAED;IACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;MACtBpB,QAAQ,CAACqB,cAAc,CAAC,iBAAiB,CAAC,CAACC,KAAK,CAACC,OAAO,GAAG,MAAM;MACjEvB,QAAQ,CAACqB,cAAc,CAAC,kBAAkB,CAAC,CAACC,KAAK,CAACC,OAAO,GAAG,MAAM;MAClE1D,aAAa,CAACE,KAAK,CAACE,SAAS,GAAI,+CAA8C;IACjF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}